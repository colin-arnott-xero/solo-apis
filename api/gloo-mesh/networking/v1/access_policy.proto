syntax = "proto3";
package networking.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh-enterprise/oss-imported/pkg/api/networking.mesh.gloo.solo.io/v1";

import "github.com/solo-io/solo-apis/api/gloo-mesh/common/v1/selectors.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/networking/v1/status.proto";
import "github.com/solo-io/solo-apis/api/gloo-mesh/common/v1/status.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;
option (extproto.clone_all) = true;

// Grants communication permission between selected identities (i.e. traffic sources) and Destinations (i.e. destinations).
// Explicitly granted access permission is required if a
// [VirtualMesh's GlobalAccessPolicy]({{% versioned_link_path fromRoot="/reference/api/virtual_mesh/#networking.mesh.gloo.solo.io.VirtualMeshSpec.GlobalAccessPolicy" %}})
// is set to `ENABLED`.
message AccessPolicySpec {

    // Specify the identities of Workloads (i.e. traffic sources) for which to apply this AccessPolicy.
    // Leave empty to apply the AccessPolicy to all Workloads colocated in the destination's Mesh.
    repeated .common.mesh.gloo.solo.io.IdentitySelector source_selector = 1;

    // Specify the Destinations for which to apply this AccessPolicy.
    // Leave empty to apply the AccessPolicy to all Destinations.
    repeated .common.mesh.gloo.solo.io.DestinationSelector destination_selector = 2;

    /*
        Optional. Fill out a list of HTTP paths or gRPC methods to allow.
        You must present gRPC methods as fully-qualified domain names in the form of
        "/packageName.serviceName/methodName", which are case sensitive.
        Exact match, prefix match, and suffix match are supported for the paths.
        For exact match, specify the path without an asterisk, such as "/books/review".
        For prefix match, end with an asterisk, such as "/books*", which could match "/books/review", "/books/book/mybook", and so on.
        For suffix match, begin with an asterisk, such as "*books/", which could match "/review/books", "/cart/filter/books", and so on.

        If you omit this setting, any path is allowed.
    */
    repeated string allowed_paths = 3;

    /*
        Optional. A list of HTTP methods to allow (e.g., "GET", "POST").
        It is ignored in gRPC case because the value is always "POST".
        If not specified, allows any method.
    */
    repeated string allowed_methods = 4;

    /*
        Optional. A list of ports which to allow.
        If not set any port is allowed.
    */
    repeated uint32 allowed_ports = 5;
}

message AccessPolicyStatus {

    // The most recent generation observed in the the AccessPolicy metadata.
    // If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource.
    // It will only show accepted if it has been successfully applied to selected Destinations.
    .common.mesh.gloo.solo.io.ApprovalState state = 2;

    // The status of the AccessPolicy for each Destination to which it has been applied.
    // An AccessPolicy may be accepted for some Destinations and rejected for others.
    map<string, ApprovalStatus> destinations = 3;

    // The status of the AccessPolicy for each selected Virtual Destination.
    // An AccessPolicy may be Accepted for some Virtual Destinations and rejected for others.
    map<string, ApprovalStatus> virtual_destinations = 6;

    // The list of Workloads to which this policy has been applied.
    repeated string workloads = 4;

    // Any errors found while processing this generation of the resource.
    repeated string errors = 5;
}
