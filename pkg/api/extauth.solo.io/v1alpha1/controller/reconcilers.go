// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./reconcilers.go -destination mocks/reconcilers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	extauth_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the ExtAuthConfig Resource.
// implemented by the user
type ExtAuthConfigReconciler interface {
	ReconcileExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the ExtAuthConfig Resource.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type ExtAuthConfigDeletionReconciler interface {
	ReconcileExtAuthConfigDeletion(req reconcile.Request) error
}

type ExtAuthConfigReconcilerFuncs struct {
	OnReconcileExtAuthConfig         func(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error)
	OnReconcileExtAuthConfigDeletion func(req reconcile.Request) error
}

func (f *ExtAuthConfigReconcilerFuncs) ReconcileExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error) {
	if f.OnReconcileExtAuthConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileExtAuthConfig(obj)
}

func (f *ExtAuthConfigReconcilerFuncs) ReconcileExtAuthConfigDeletion(req reconcile.Request) error {
	if f.OnReconcileExtAuthConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileExtAuthConfigDeletion(req)
}

// Reconcile and finalize the ExtAuthConfig Resource
// implemented by the user
type ExtAuthConfigFinalizer interface {
	ExtAuthConfigReconciler

	// name of the finalizer used by this handler.
	// finalizer names should be unique for a single task
	ExtAuthConfigFinalizerName() string

	// finalize the object before it is deleted.
	// Watchers created with a finalizing handler will a
	FinalizeExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
}

type ExtAuthConfigReconcileLoop interface {
	RunExtAuthConfigReconciler(ctx context.Context, rec ExtAuthConfigReconciler, predicates ...predicate.Predicate) error
}

type extAuthConfigReconcileLoop struct {
	loop reconcile.Loop
}

func NewExtAuthConfigReconcileLoop(name string, mgr manager.Manager, options reconcile.Options) ExtAuthConfigReconcileLoop {
	return &extAuthConfigReconcileLoop{
		// empty cluster indicates this reconciler is built for the local cluster
		loop: reconcile.NewLoop(name, "", mgr, &extauth_solo_io_v1alpha1.ExtAuthConfig{}, options),
	}
}

func (c *extAuthConfigReconcileLoop) RunExtAuthConfigReconciler(ctx context.Context, reconciler ExtAuthConfigReconciler, predicates ...predicate.Predicate) error {
	genericReconciler := genericExtAuthConfigReconciler{
		reconciler: reconciler,
	}

	var reconcilerWrapper reconcile.Reconciler
	if finalizingReconciler, ok := reconciler.(ExtAuthConfigFinalizer); ok {
		reconcilerWrapper = genericExtAuthConfigFinalizer{
			genericExtAuthConfigReconciler: genericReconciler,
			finalizingReconciler:           finalizingReconciler,
		}
	} else {
		reconcilerWrapper = genericReconciler
	}
	return c.loop.RunReconciler(ctx, reconcilerWrapper, predicates...)
}

// genericExtAuthConfigHandler implements a generic reconcile.Reconciler
type genericExtAuthConfigReconciler struct {
	reconciler ExtAuthConfigReconciler
}

func (r genericExtAuthConfigReconciler) Reconcile(object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return r.reconciler.ReconcileExtAuthConfig(obj)
}

func (r genericExtAuthConfigReconciler) ReconcileDeletion(request reconcile.Request) error {
	if deletionReconciler, ok := r.reconciler.(ExtAuthConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileExtAuthConfigDeletion(request)
	}
	return nil
}

// genericExtAuthConfigFinalizer implements a generic reconcile.FinalizingReconciler
type genericExtAuthConfigFinalizer struct {
	genericExtAuthConfigReconciler
	finalizingReconciler ExtAuthConfigFinalizer
}

func (r genericExtAuthConfigFinalizer) FinalizerName() string {
	return r.finalizingReconciler.ExtAuthConfigFinalizerName()
}

func (r genericExtAuthConfigFinalizer) Finalize(object ezkube.Object) error {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return r.finalizingReconciler.FinalizeExtAuthConfig(obj)
}
