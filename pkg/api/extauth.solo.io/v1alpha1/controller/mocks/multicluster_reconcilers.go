// Code generated by MockGen. DO NOT EDIT.
// Source: ./multicluster_reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/ext-auth-service/pkg/api/extauth.solo.io/v1alpha1"
	controller "github.com/solo-io/ext-auth-service/pkg/api/extauth.solo.io/v1alpha1/controller"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMulticlusterExtAuthConfigReconciler is a mock of MulticlusterExtAuthConfigReconciler interface
type MockMulticlusterExtAuthConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExtAuthConfigReconcilerMockRecorder
}

// MockMulticlusterExtAuthConfigReconcilerMockRecorder is the mock recorder for MockMulticlusterExtAuthConfigReconciler
type MockMulticlusterExtAuthConfigReconcilerMockRecorder struct {
	mock *MockMulticlusterExtAuthConfigReconciler
}

// NewMockMulticlusterExtAuthConfigReconciler creates a new mock instance
func NewMockMulticlusterExtAuthConfigReconciler(ctrl *gomock.Controller) *MockMulticlusterExtAuthConfigReconciler {
	mock := &MockMulticlusterExtAuthConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExtAuthConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterExtAuthConfigReconciler) EXPECT() *MockMulticlusterExtAuthConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthConfig mocks base method
func (m *MockMulticlusterExtAuthConfigReconciler) ReconcileExtAuthConfig(clusterName string, obj *v1alpha1.ExtAuthConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthConfig", clusterName, obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthConfig indicates an expected call of ReconcileExtAuthConfig
func (mr *MockMulticlusterExtAuthConfigReconcilerMockRecorder) ReconcileExtAuthConfig(clusterName, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthConfig", reflect.TypeOf((*MockMulticlusterExtAuthConfigReconciler)(nil).ReconcileExtAuthConfig), clusterName, obj)
}

// MockMulticlusterExtAuthConfigDeletionReconciler is a mock of MulticlusterExtAuthConfigDeletionReconciler interface
type MockMulticlusterExtAuthConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder
}

// MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder is the mock recorder for MockMulticlusterExtAuthConfigDeletionReconciler
type MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder struct {
	mock *MockMulticlusterExtAuthConfigDeletionReconciler
}

// NewMockMulticlusterExtAuthConfigDeletionReconciler creates a new mock instance
func NewMockMulticlusterExtAuthConfigDeletionReconciler(ctrl *gomock.Controller) *MockMulticlusterExtAuthConfigDeletionReconciler {
	mock := &MockMulticlusterExtAuthConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterExtAuthConfigDeletionReconciler) EXPECT() *MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthConfigDeletion mocks base method
func (m *MockMulticlusterExtAuthConfigDeletionReconciler) ReconcileExtAuthConfigDeletion(clusterName string, req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthConfigDeletion", clusterName, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExtAuthConfigDeletion indicates an expected call of ReconcileExtAuthConfigDeletion
func (mr *MockMulticlusterExtAuthConfigDeletionReconcilerMockRecorder) ReconcileExtAuthConfigDeletion(clusterName, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthConfigDeletion", reflect.TypeOf((*MockMulticlusterExtAuthConfigDeletionReconciler)(nil).ReconcileExtAuthConfigDeletion), clusterName, req)
}

// MockMulticlusterExtAuthConfigReconcileLoop is a mock of MulticlusterExtAuthConfigReconcileLoop interface
type MockMulticlusterExtAuthConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExtAuthConfigReconcileLoopMockRecorder
}

// MockMulticlusterExtAuthConfigReconcileLoopMockRecorder is the mock recorder for MockMulticlusterExtAuthConfigReconcileLoop
type MockMulticlusterExtAuthConfigReconcileLoopMockRecorder struct {
	mock *MockMulticlusterExtAuthConfigReconcileLoop
}

// NewMockMulticlusterExtAuthConfigReconcileLoop creates a new mock instance
func NewMockMulticlusterExtAuthConfigReconcileLoop(ctrl *gomock.Controller) *MockMulticlusterExtAuthConfigReconcileLoop {
	mock := &MockMulticlusterExtAuthConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExtAuthConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticlusterExtAuthConfigReconcileLoop) EXPECT() *MockMulticlusterExtAuthConfigReconcileLoopMockRecorder {
	return m.recorder
}

// AddMulticlusterExtAuthConfigReconciler mocks base method
func (m *MockMulticlusterExtAuthConfigReconcileLoop) AddMulticlusterExtAuthConfigReconciler(ctx context.Context, rec controller.MulticlusterExtAuthConfigReconciler, predicates ...predicate.Predicate) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddMulticlusterExtAuthConfigReconciler", varargs...)
}

// AddMulticlusterExtAuthConfigReconciler indicates an expected call of AddMulticlusterExtAuthConfigReconciler
func (mr *MockMulticlusterExtAuthConfigReconcileLoopMockRecorder) AddMulticlusterExtAuthConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMulticlusterExtAuthConfigReconciler", reflect.TypeOf((*MockMulticlusterExtAuthConfigReconcileLoop)(nil).AddMulticlusterExtAuthConfigReconciler), varargs...)
}
