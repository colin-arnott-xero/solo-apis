// Code generated by MockGen. DO NOT EDIT.
// Source: ./reconcilers.go

// Package mock_controller is a generated GoMock package.
package mock_controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	reconcile "github.com/solo-io/skv2/pkg/reconcile"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1"
	controller "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockExtAuthConfigReconciler is a mock of ExtAuthConfigReconciler interface
type MockExtAuthConfigReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigReconcilerMockRecorder
}

// MockExtAuthConfigReconcilerMockRecorder is the mock recorder for MockExtAuthConfigReconciler
type MockExtAuthConfigReconcilerMockRecorder struct {
	mock *MockExtAuthConfigReconciler
}

// NewMockExtAuthConfigReconciler creates a new mock instance
func NewMockExtAuthConfigReconciler(ctrl *gomock.Controller) *MockExtAuthConfigReconciler {
	mock := &MockExtAuthConfigReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthConfigReconciler) EXPECT() *MockExtAuthConfigReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthConfig mocks base method
func (m *MockExtAuthConfigReconciler) ReconcileExtAuthConfig(obj *v1alpha1.ExtAuthConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthConfig indicates an expected call of ReconcileExtAuthConfig
func (mr *MockExtAuthConfigReconcilerMockRecorder) ReconcileExtAuthConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigReconciler)(nil).ReconcileExtAuthConfig), obj)
}

// MockExtAuthConfigDeletionReconciler is a mock of ExtAuthConfigDeletionReconciler interface
type MockExtAuthConfigDeletionReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigDeletionReconcilerMockRecorder
}

// MockExtAuthConfigDeletionReconcilerMockRecorder is the mock recorder for MockExtAuthConfigDeletionReconciler
type MockExtAuthConfigDeletionReconcilerMockRecorder struct {
	mock *MockExtAuthConfigDeletionReconciler
}

// NewMockExtAuthConfigDeletionReconciler creates a new mock instance
func NewMockExtAuthConfigDeletionReconciler(ctrl *gomock.Controller) *MockExtAuthConfigDeletionReconciler {
	mock := &MockExtAuthConfigDeletionReconciler{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigDeletionReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthConfigDeletionReconciler) EXPECT() *MockExtAuthConfigDeletionReconcilerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthConfigDeletion mocks base method
func (m *MockExtAuthConfigDeletionReconciler) ReconcileExtAuthConfigDeletion(req reconcile.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthConfigDeletion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconcileExtAuthConfigDeletion indicates an expected call of ReconcileExtAuthConfigDeletion
func (mr *MockExtAuthConfigDeletionReconcilerMockRecorder) ReconcileExtAuthConfigDeletion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthConfigDeletion", reflect.TypeOf((*MockExtAuthConfigDeletionReconciler)(nil).ReconcileExtAuthConfigDeletion), req)
}

// MockExtAuthConfigFinalizer is a mock of ExtAuthConfigFinalizer interface
type MockExtAuthConfigFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigFinalizerMockRecorder
}

// MockExtAuthConfigFinalizerMockRecorder is the mock recorder for MockExtAuthConfigFinalizer
type MockExtAuthConfigFinalizerMockRecorder struct {
	mock *MockExtAuthConfigFinalizer
}

// NewMockExtAuthConfigFinalizer creates a new mock instance
func NewMockExtAuthConfigFinalizer(ctrl *gomock.Controller) *MockExtAuthConfigFinalizer {
	mock := &MockExtAuthConfigFinalizer{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthConfigFinalizer) EXPECT() *MockExtAuthConfigFinalizerMockRecorder {
	return m.recorder
}

// ReconcileExtAuthConfig mocks base method
func (m *MockExtAuthConfigFinalizer) ReconcileExtAuthConfig(obj *v1alpha1.ExtAuthConfig) (reconcile.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconcileExtAuthConfig", obj)
	ret0, _ := ret[0].(reconcile.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileExtAuthConfig indicates an expected call of ReconcileExtAuthConfig
func (mr *MockExtAuthConfigFinalizerMockRecorder) ReconcileExtAuthConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigFinalizer)(nil).ReconcileExtAuthConfig), obj)
}

// ExtAuthConfigFinalizerName mocks base method
func (m *MockExtAuthConfigFinalizer) ExtAuthConfigFinalizerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtAuthConfigFinalizerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtAuthConfigFinalizerName indicates an expected call of ExtAuthConfigFinalizerName
func (mr *MockExtAuthConfigFinalizerMockRecorder) ExtAuthConfigFinalizerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtAuthConfigFinalizerName", reflect.TypeOf((*MockExtAuthConfigFinalizer)(nil).ExtAuthConfigFinalizerName))
}

// FinalizeExtAuthConfig mocks base method
func (m *MockExtAuthConfigFinalizer) FinalizeExtAuthConfig(obj *v1alpha1.ExtAuthConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeExtAuthConfig", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinalizeExtAuthConfig indicates an expected call of FinalizeExtAuthConfig
func (mr *MockExtAuthConfigFinalizerMockRecorder) FinalizeExtAuthConfig(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigFinalizer)(nil).FinalizeExtAuthConfig), obj)
}

// MockExtAuthConfigReconcileLoop is a mock of ExtAuthConfigReconcileLoop interface
type MockExtAuthConfigReconcileLoop struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigReconcileLoopMockRecorder
}

// MockExtAuthConfigReconcileLoopMockRecorder is the mock recorder for MockExtAuthConfigReconcileLoop
type MockExtAuthConfigReconcileLoopMockRecorder struct {
	mock *MockExtAuthConfigReconcileLoop
}

// NewMockExtAuthConfigReconcileLoop creates a new mock instance
func NewMockExtAuthConfigReconcileLoop(ctrl *gomock.Controller) *MockExtAuthConfigReconcileLoop {
	mock := &MockExtAuthConfigReconcileLoop{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigReconcileLoopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExtAuthConfigReconcileLoop) EXPECT() *MockExtAuthConfigReconcileLoopMockRecorder {
	return m.recorder
}

// RunExtAuthConfigReconciler mocks base method
func (m *MockExtAuthConfigReconcileLoop) RunExtAuthConfigReconciler(ctx context.Context, rec controller.ExtAuthConfigReconciler, predicates ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, rec}
	for _, a := range predicates {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunExtAuthConfigReconciler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunExtAuthConfigReconciler indicates an expected call of RunExtAuthConfigReconciler
func (mr *MockExtAuthConfigReconcileLoopMockRecorder) RunExtAuthConfigReconciler(ctx, rec interface{}, predicates ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, rec}, predicates...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunExtAuthConfigReconciler", reflect.TypeOf((*MockExtAuthConfigReconcileLoop)(nil).RunExtAuthConfigReconciler), varargs...)
}
