// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./event_handlers.go -destination mocks/event_handlers.go

// Definitions for the Kubernetes Controllers
package controller

import (
	"context"

	extauth_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1"

	"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/events"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Handle events for the ExtAuthConfig Resource
// DEPRECATED: Prefer reconciler pattern.
type ExtAuthConfigEventHandler interface {
	CreateExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	UpdateExtAuthConfig(old, new *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	DeleteExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	GenericExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
}

type ExtAuthConfigEventHandlerFuncs struct {
	OnCreate  func(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	OnUpdate  func(old, new *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	OnDelete  func(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
	OnGeneric func(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error
}

func (f *ExtAuthConfigEventHandlerFuncs) CreateExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error {
	if f.OnCreate == nil {
		return nil
	}
	return f.OnCreate(obj)
}

func (f *ExtAuthConfigEventHandlerFuncs) DeleteExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error {
	if f.OnDelete == nil {
		return nil
	}
	return f.OnDelete(obj)
}

func (f *ExtAuthConfigEventHandlerFuncs) UpdateExtAuthConfig(objOld, objNew *extauth_solo_io_v1alpha1.ExtAuthConfig) error {
	if f.OnUpdate == nil {
		return nil
	}
	return f.OnUpdate(objOld, objNew)
}

func (f *ExtAuthConfigEventHandlerFuncs) GenericExtAuthConfig(obj *extauth_solo_io_v1alpha1.ExtAuthConfig) error {
	if f.OnGeneric == nil {
		return nil
	}
	return f.OnGeneric(obj)
}

type ExtAuthConfigEventWatcher interface {
	AddEventHandler(ctx context.Context, h ExtAuthConfigEventHandler, predicates ...predicate.Predicate) error
}

type extAuthConfigEventWatcher struct {
	watcher events.EventWatcher
}

func NewExtAuthConfigEventWatcher(name string, mgr manager.Manager) ExtAuthConfigEventWatcher {
	return &extAuthConfigEventWatcher{
		watcher: events.NewWatcher(name, mgr, &extauth_solo_io_v1alpha1.ExtAuthConfig{}),
	}
}

func (c *extAuthConfigEventWatcher) AddEventHandler(ctx context.Context, h ExtAuthConfigEventHandler, predicates ...predicate.Predicate) error {
	handler := genericExtAuthConfigHandler{handler: h}
	if err := c.watcher.Watch(ctx, handler, predicates...); err != nil {
		return err
	}
	return nil
}

// genericExtAuthConfigHandler implements a generic events.EventHandler
type genericExtAuthConfigHandler struct {
	handler ExtAuthConfigEventHandler
}

func (h genericExtAuthConfigHandler) Create(object client.Object) error {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return h.handler.CreateExtAuthConfig(obj)
}

func (h genericExtAuthConfigHandler) Delete(object client.Object) error {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return h.handler.DeleteExtAuthConfig(obj)
}

func (h genericExtAuthConfigHandler) Update(old, new client.Object) error {
	objOld, ok := old.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", old)
	}
	objNew, ok := new.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", new)
	}
	return h.handler.UpdateExtAuthConfig(objOld, objNew)
}

func (h genericExtAuthConfigHandler) Generic(object client.Object) error {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return h.handler.GenericExtAuthConfig(obj)
}
