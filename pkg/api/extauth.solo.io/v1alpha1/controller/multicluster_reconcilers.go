// Code generated by skv2. DO NOT EDIT.

//go:generate mockgen -source ./multicluster_reconcilers.go -destination mocks/multicluster_reconcilers.go

// Definitions for the multicluster Kubernetes Controllers
package controller

import (
	"context"

	extauth_solo_io_v1alpha1 "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1"


"github.com/pkg/errors"
	"github.com/solo-io/skv2/pkg/ezkube"
	"github.com/solo-io/skv2/pkg/multicluster"
	mc_reconcile "github.com/solo-io/skv2/pkg/multicluster/reconcile"
	"github.com/solo-io/skv2/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

// Reconcile Upsert events for the ExtAuthConfig Resource across clusters.
// implemented by the user
type MulticlusterExtAuthConfigReconciler interface {
	ReconcileExtAuthConfig(clusterName string, obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error)
}

// Reconcile deletion events for the ExtAuthConfig Resource across clusters.
// Deletion receives a reconcile.Request as we cannot guarantee the last state of the object
// before being deleted.
// implemented by the user
type MulticlusterExtAuthConfigDeletionReconciler interface {
	ReconcileExtAuthConfigDeletion(clusterName string, req reconcile.Request) error
}

type MulticlusterExtAuthConfigReconcilerFuncs struct {
	OnReconcileExtAuthConfig         func(clusterName string, obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error)
	OnReconcileExtAuthConfigDeletion func(clusterName string, req reconcile.Request) error
}

func (f *MulticlusterExtAuthConfigReconcilerFuncs) ReconcileExtAuthConfig(clusterName string, obj *extauth_solo_io_v1alpha1.ExtAuthConfig) (reconcile.Result, error) {
	if f.OnReconcileExtAuthConfig == nil {
		return reconcile.Result{}, nil
	}
	return f.OnReconcileExtAuthConfig(clusterName, obj)
}

func (f *MulticlusterExtAuthConfigReconcilerFuncs) ReconcileExtAuthConfigDeletion(clusterName string, req reconcile.Request) error {
	if f.OnReconcileExtAuthConfigDeletion == nil {
		return nil
	}
	return f.OnReconcileExtAuthConfigDeletion(clusterName, req)
}

type MulticlusterExtAuthConfigReconcileLoop interface {
	// AddMulticlusterExtAuthConfigReconciler adds a MulticlusterExtAuthConfigReconciler to the MulticlusterExtAuthConfigReconcileLoop.
	AddMulticlusterExtAuthConfigReconciler(ctx context.Context, rec MulticlusterExtAuthConfigReconciler, predicates ...predicate.Predicate)
}

type multiclusterExtAuthConfigReconcileLoop struct {
	loop multicluster.Loop
}

func (m *multiclusterExtAuthConfigReconcileLoop) AddMulticlusterExtAuthConfigReconciler(ctx context.Context, rec MulticlusterExtAuthConfigReconciler, predicates ...predicate.Predicate) {
	genericReconciler := genericExtAuthConfigMulticlusterReconciler{reconciler: rec}

	m.loop.AddReconciler(ctx, genericReconciler, predicates...)
}

func NewMulticlusterExtAuthConfigReconcileLoop(name string, cw multicluster.ClusterWatcher, options reconcile.Options) MulticlusterExtAuthConfigReconcileLoop {
	return &multiclusterExtAuthConfigReconcileLoop{loop: mc_reconcile.NewLoop(name, cw, &extauth_solo_io_v1alpha1.ExtAuthConfig{}, options)}
}

type genericExtAuthConfigMulticlusterReconciler struct {
	reconciler MulticlusterExtAuthConfigReconciler
}

func (g genericExtAuthConfigMulticlusterReconciler) ReconcileDeletion(cluster string, req reconcile.Request) error {
	if deletionReconciler, ok := g.reconciler.(MulticlusterExtAuthConfigDeletionReconciler); ok {
		return deletionReconciler.ReconcileExtAuthConfigDeletion(cluster, req)
	}
	return nil
}

func (g genericExtAuthConfigMulticlusterReconciler) Reconcile(cluster string, object ezkube.Object) (reconcile.Result, error) {
	obj, ok := object.(*extauth_solo_io_v1alpha1.ExtAuthConfig)
	if !ok {
		return reconcile.Result{}, errors.Errorf("internal error: ExtAuthConfig handler received event for %T", object)
	}
	return g.reconciler.ReconcileExtAuthConfig(cluster, obj)
}
