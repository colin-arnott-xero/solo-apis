// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: github.com/solo-io/solo-apis/api/v1alpha1/extauth.proto

package types

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ExtAuthConfigStatus_State int32

const (
	ExtAuthConfigStatus_PENDING  ExtAuthConfigStatus_State = 0
	ExtAuthConfigStatus_ACCEPTED ExtAuthConfigStatus_State = 1
	ExtAuthConfigStatus_REJECTED ExtAuthConfigStatus_State = 2
)

// Enum value maps for ExtAuthConfigStatus_State.
var (
	ExtAuthConfigStatus_State_name = map[int32]string{
		0: "PENDING",
		1: "ACCEPTED",
		2: "REJECTED",
	}
	ExtAuthConfigStatus_State_value = map[string]int32{
		"PENDING":  0,
		"ACCEPTED": 1,
		"REJECTED": 2,
	}
)

func (x ExtAuthConfigStatus_State) Enum() *ExtAuthConfigStatus_State {
	p := new(ExtAuthConfigStatus_State)
	*p = x
	return p
}

func (x ExtAuthConfigStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtAuthConfigStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_enumTypes[0].Descriptor()
}

func (ExtAuthConfigStatus_State) Type() protoreflect.EnumType {
	return &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_enumTypes[0]
}

func (x ExtAuthConfigStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtAuthConfigStatus_State.Descriptor instead.
func (ExtAuthConfigStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{11, 0}
}

type ExtAuthConfigSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @solo-kit:resource.name
	// This is the identifier of the AuthConfig resource that this configuration is associated with.
	// Any request to the external auth server includes an identifier that is matched against this field to determine
	// which AuthConfig should be applied to it.
	AuthConfigRefName string `protobuf:"bytes,1,opt,name=auth_config_ref_name,json=authConfigRefName,proto3" json:"auth_config_ref_name,omitempty"`
	// List of auth configs to be checked for requests on a route referencing this auth config,
	// By default, every config must be authorized for the entire request to be authorized. This
	// behavior can be changed by defining names for each config and defining `boolean_expr` below.
	//
	// State is shared between successful requests on the chain, i.e., the headers returned from each
	// successful auth service get appended into the final auth response.
	Configs []*ExtAuthConfigSpec_Config `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty"`
	// How to handle processing of named configs within an auth config chain.
	// An example config might be: `( basic1 || basic2 || (oidc1 && !oidc2) )`
	// The boolean expression is evaluated left to right but honors parenthesis and short-circuiting.
	BooleanExpr *wrappers.StringValue `protobuf:"bytes,10,opt,name=boolean_expr,json=booleanExpr,proto3" json:"boolean_expr,omitempty"`
}

func (x *ExtAuthConfigSpec) Reset() {
	*x = ExtAuthConfigSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec) ProtoMessage() {}

func (x *ExtAuthConfigSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0}
}

func (x *ExtAuthConfigSpec) GetAuthConfigRefName() string {
	if x != nil {
		return x.AuthConfigRefName
	}
	return ""
}

func (x *ExtAuthConfigSpec) GetConfigs() []*ExtAuthConfigSpec_Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *ExtAuthConfigSpec) GetBooleanExpr() *wrappers.StringValue {
	if x != nil {
		return x.BooleanExpr
	}
	return nil
}

type AuthPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the plugin
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the compiled plugin file. If not specified, Gloo Edge will look for an ".so" file with same name as the plugin.
	PluginFileName string `protobuf:"bytes,2,opt,name=plugin_file_name,json=pluginFileName,proto3" json:"plugin_file_name,omitempty"`
	// Name of the exported symbol that implements the plugin interface in the plugin.
	// If not specified, defaults to the name of the plugin
	ExportedSymbolName string          `protobuf:"bytes,3,opt,name=exported_symbol_name,json=exportedSymbolName,proto3" json:"exported_symbol_name,omitempty"`
	Config             *_struct.Struct `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *AuthPlugin) Reset() {
	*x = AuthPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthPlugin) ProtoMessage() {}

func (x *AuthPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthPlugin.ProtoReflect.Descriptor instead.
func (*AuthPlugin) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{1}
}

func (x *AuthPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthPlugin) GetPluginFileName() string {
	if x != nil {
		return x.PluginFileName
	}
	return ""
}

func (x *AuthPlugin) GetExportedSymbolName() string {
	if x != nil {
		return x.ExportedSymbolName
	}
	return ""
}

func (x *AuthPlugin) GetConfig() *_struct.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

type BasicAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Realm string         `protobuf:"bytes,1,opt,name=realm,proto3" json:"realm,omitempty"`
	Apr   *BasicAuth_Apr `protobuf:"bytes,2,opt,name=apr,proto3" json:"apr,omitempty"`
}

func (x *BasicAuth) Reset() {
	*x = BasicAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuth) ProtoMessage() {}

func (x *BasicAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuth.ProtoReflect.Descriptor instead.
func (*BasicAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{2}
}

func (x *BasicAuth) GetRealm() string {
	if x != nil {
		return x.Realm
	}
	return ""
}

func (x *BasicAuth) GetApr() *BasicAuth_Apr {
	if x != nil {
		return x.Apr
	}
	return nil
}

type RedisOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address of the redis. can be address:port or unix://path/to/unix.sock
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// db to use. can leave unset for db 0.
	Db int32 `protobuf:"varint,2,opt,name=db,proto3" json:"db,omitempty"`
	// size of the connection pool. can leave unset for default.
	// defaults to 10 connections per every CPU
	PoolSize int32 `protobuf:"varint,3,opt,name=pool_size,json=poolSize,proto3" json:"pool_size,omitempty"`
}

func (x *RedisOptions) Reset() {
	*x = RedisOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisOptions) ProtoMessage() {}

func (x *RedisOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisOptions.ProtoReflect.Descriptor instead.
func (*RedisOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{3}
}

func (x *RedisOptions) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisOptions) GetDb() int32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *RedisOptions) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

type UserSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// should we fail auth flow when failing to get a session from redis, or allow it to continue,
	// potentially starting a new auth flow and setting a new session.
	FailOnFetchFailure bool `protobuf:"varint,1,opt,name=fail_on_fetch_failure,json=failOnFetchFailure,proto3" json:"fail_on_fetch_failure,omitempty"`
	// Set-Cookie options
	CookieOptions *UserSession_CookieOptions `protobuf:"bytes,2,opt,name=cookie_options,json=cookieOptions,proto3" json:"cookie_options,omitempty"`
	// Types that are assignable to Session:
	//	*UserSession_Cookie
	//	*UserSession_Redis
	Session isUserSession_Session `protobuf_oneof:"session"`
}

func (x *UserSession) Reset() {
	*x = UserSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession) ProtoMessage() {}

func (x *UserSession) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession.ProtoReflect.Descriptor instead.
func (*UserSession) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{4}
}

func (x *UserSession) GetFailOnFetchFailure() bool {
	if x != nil {
		return x.FailOnFetchFailure
	}
	return false
}

func (x *UserSession) GetCookieOptions() *UserSession_CookieOptions {
	if x != nil {
		return x.CookieOptions
	}
	return nil
}

func (m *UserSession) GetSession() isUserSession_Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (x *UserSession) GetCookie() *UserSession_InternalSession {
	if x, ok := x.GetSession().(*UserSession_Cookie); ok {
		return x.Cookie
	}
	return nil
}

func (x *UserSession) GetRedis() *UserSession_RedisSession {
	if x, ok := x.GetSession().(*UserSession_Redis); ok {
		return x.Redis
	}
	return nil
}

type isUserSession_Session interface {
	isUserSession_Session()
}

type UserSession_Cookie struct {
	// Set the tokens in the cookie itself. No need for server side state.
	Cookie *UserSession_InternalSession `protobuf:"bytes,3,opt,name=cookie,proto3,oneof"`
}

type UserSession_Redis struct {
	// Use redis to store the tokens and just store a random id in the cookie.
	Redis *UserSession_RedisSession `protobuf:"bytes,4,opt,name=redis,proto3,oneof"`
}

func (*UserSession_Cookie) isUserSession_Session() {}

func (*UserSession_Redis) isUserSession_Session() {}

type HeaderConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, the id token will be forward upstream using this header name.
	IdTokenHeader string `protobuf:"bytes,1,opt,name=id_token_header,json=idTokenHeader,proto3" json:"id_token_header,omitempty"`
	// If set, the access token will be forward upstream using this header name.
	AccessTokenHeader string `protobuf:"bytes,2,opt,name=access_token_header,json=accessTokenHeader,proto3" json:"access_token_header,omitempty"`
}

func (x *HeaderConfiguration) Reset() {
	*x = HeaderConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderConfiguration) ProtoMessage() {}

func (x *HeaderConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderConfiguration.ProtoReflect.Descriptor instead.
func (*HeaderConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{5}
}

func (x *HeaderConfiguration) GetIdTokenHeader() string {
	if x != nil {
		return x.IdTokenHeader
	}
	return ""
}

func (x *HeaderConfiguration) GetAccessTokenHeader() string {
	if x != nil {
		return x.AccessTokenHeader
	}
	return ""
}

// OIDC configuration is discovered at <issuerUrl>/.well-known/openid-configuration
// The discovery override defines any properties that should override this discovery configuration
// https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata
type DiscoveryOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url of the provider authorization endpoint
	AuthEndpoint string `protobuf:"bytes,1,opt,name=auth_endpoint,json=authEndpoint,proto3" json:"auth_endpoint,omitempty"`
	// url of the provider token endpoint
	TokenEndpoint string `protobuf:"bytes,2,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// url of the provider json web key set
	JwksUri string `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// list of scope values that the provider supports
	Scopes []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// list of response types that the provider supports
	ResponseTypes []string `protobuf:"bytes,5,rep,name=response_types,json=responseTypes,proto3" json:"response_types,omitempty"`
	// list of subject identifier types that the provider supports
	Subjects []string `protobuf:"bytes,6,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// list of json web signature signing algorithms that the provider supports for encoding claims in a jwt
	IdTokenAlgs []string `protobuf:"bytes,7,rep,name=id_token_algs,json=idTokenAlgs,proto3" json:"id_token_algs,omitempty"`
	// list of client authentication methods supported by the provider token endpoint
	AuthMethods []string `protobuf:"bytes,8,rep,name=auth_methods,json=authMethods,proto3" json:"auth_methods,omitempty"`
	// list of claim types that the provider supports
	Claims []string `protobuf:"bytes,9,rep,name=claims,proto3" json:"claims,omitempty"`
}

func (x *DiscoveryOverride) Reset() {
	*x = DiscoveryOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscoveryOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscoveryOverride) ProtoMessage() {}

func (x *DiscoveryOverride) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscoveryOverride.ProtoReflect.Descriptor instead.
func (*DiscoveryOverride) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{6}
}

func (x *DiscoveryOverride) GetAuthEndpoint() string {
	if x != nil {
		return x.AuthEndpoint
	}
	return ""
}

func (x *DiscoveryOverride) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *DiscoveryOverride) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *DiscoveryOverride) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *DiscoveryOverride) GetResponseTypes() []string {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

func (x *DiscoveryOverride) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *DiscoveryOverride) GetIdTokenAlgs() []string {
	if x != nil {
		return x.IdTokenAlgs
	}
	return nil
}

func (x *DiscoveryOverride) GetAuthMethods() []string {
	if x != nil {
		return x.AuthMethods
	}
	return nil
}

func (x *DiscoveryOverride) GetClaims() []string {
	if x != nil {
		return x.Claims
	}
	return nil
}

// The json web key set (JWKS) (https://tools.ietf.org/html/rfc7517) is discovered at an interval
// from a remote source. When keys rotate in the remote source, there may be a delay in the
// local source picking up those new keys. Therefore, a user could execute a request with a token
// that has been signed by a key in the remote JWKS, but the local cache doesn't have the key yet.
// The request would fail because the key isn't contained in the local set. Since most IdPs publish key
// keys in their remote JWKS before they are used, this is not an issue most of the time.
// This policy lets you define the behavior for when a user has a token with a key
// not yet in the local cache.
type JwksOnDemandCacheRefreshPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//	*JwksOnDemandCacheRefreshPolicy_Never
	//	*JwksOnDemandCacheRefreshPolicy_Always
	//	*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval
	Policy isJwksOnDemandCacheRefreshPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *JwksOnDemandCacheRefreshPolicy) Reset() {
	*x = JwksOnDemandCacheRefreshPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwksOnDemandCacheRefreshPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwksOnDemandCacheRefreshPolicy) ProtoMessage() {}

func (x *JwksOnDemandCacheRefreshPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwksOnDemandCacheRefreshPolicy.ProtoReflect.Descriptor instead.
func (*JwksOnDemandCacheRefreshPolicy) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{7}
}

func (m *JwksOnDemandCacheRefreshPolicy) GetPolicy() isJwksOnDemandCacheRefreshPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetNever() *empty.Empty {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_Never); ok {
		return x.Never
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetAlways() *empty.Empty {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_Always); ok {
		return x.Always
	}
	return nil
}

func (x *JwksOnDemandCacheRefreshPolicy) GetMaxIdpReqPerPollingInterval() uint32 {
	if x, ok := x.GetPolicy().(*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval); ok {
		return x.MaxIdpReqPerPollingInterval
	}
	return 0
}

type isJwksOnDemandCacheRefreshPolicy_Policy interface {
	isJwksOnDemandCacheRefreshPolicy_Policy()
}

type JwksOnDemandCacheRefreshPolicy_Never struct {
	// Never refresh the local JWKS cache on demand. If a key is not in the cache, it is assumed to be malicious.
	// This is the default policy since we assume that IdPs publish keys before they rotate them,
	// and frequent polling finds the newest keys.
	Never *empty.Empty `protobuf:"bytes,1,opt,name=never,proto3,oneof"`
}

type JwksOnDemandCacheRefreshPolicy_Always struct {
	// If a key is not in the cache, fetch the most recent keys from the IdP and update the cache.
	// NOTE: This should only be done in trusted environments, since missing keys will each trigger
	// a request to the IdP. Using this in an environment exposed to the internet will allow malicious agents to
	// execute a DDoS attack by spamming protected endpoints with tokens signed by invalid keys.
	Always *empty.Empty `protobuf:"bytes,2,opt,name=always,proto3,oneof"`
}

type JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval struct {
	// If a key is not in the cache, fetch the most recent keys from the IdP and update the cache.
	// This value sets the number of requests to the IdP per polling interval. If that limit is exceeded,
	// we will stop fetching from the IdP for the remainder of the polling interval.
	MaxIdpReqPerPollingInterval uint32 `protobuf:"varint,3,opt,name=max_idp_req_per_polling_interval,json=maxIdpReqPerPollingInterval,proto3,oneof"`
}

func (*JwksOnDemandCacheRefreshPolicy_Never) isJwksOnDemandCacheRefreshPolicy_Policy() {}

func (*JwksOnDemandCacheRefreshPolicy_Always) isJwksOnDemandCacheRefreshPolicy_Policy() {}

func (*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval) isJwksOnDemandCacheRefreshPolicy_Policy() {
}

// Authenticates and authorizes requests by querying an LDAP server. Gloo makes the following assumptions:
//  * Requests provide credentials via the basic HTTP authentication header. Gloo will BIND to the LDAP server using the
//    credentials extracted from the header.
//  * Your LDAP server is configured so that each entry you want to authorize has an attribute that indicates its group
//    memberships. A common way of achieving this is by using the [*memberof* overlay](http://www.openldap.org/software/man.cgi?query=slapo-memberof).
type Ldap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the LDAP server to query. Should be in the form ADDRESS:PORT, e.g. `ldap.default.svc.cluster.local:389`.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Template to build user entry distinguished names (DN). This must contains a single occurrence of the "%s" placeholder.
	// When processing a request, Gloo will substitute the name of the user (extracted from the auth header) for the
	// placeholder and issue a search request with the resulting DN as baseDN (and 'base' search scope).
	// E.g. "uid=%s,ou=people,dc=solo,dc=io"
	UserDnTemplate string `protobuf:"bytes,2,opt,name=userDnTemplate,proto3" json:"userDnTemplate,omitempty"`
	// Case-insensitive name of the attribute that contains the names of the groups an entry is member of. Gloo will look
	// for attributes with the given name to determine which groups the user entry belongs to. Defaults to 'memberOf' if not provided.
	MembershipAttributeName string `protobuf:"bytes,3,opt,name=membershipAttributeName,proto3" json:"membershipAttributeName,omitempty"`
	// In order for the request to be authenticated, the membership attribute (e.g. *memberOf*) on the user entry must
	// contain at least of one of the group DNs specified via this option.
	// E.g. []string{ "cn=managers,ou=groups,dc=solo,dc=io", "cn=developers,ou=groups,dc=solo,dc=io" }
	AllowedGroups []string `protobuf:"bytes,4,rep,name=allowedGroups,proto3" json:"allowedGroups,omitempty"`
	// Use this property to tune the pool of connections to the LDAP server that Gloo maintains.
	Pool *Ldap_ConnectionPool `protobuf:"bytes,5,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (x *Ldap) Reset() {
	*x = Ldap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ldap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ldap) ProtoMessage() {}

func (x *Ldap) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ldap.ProtoReflect.Descriptor instead.
func (*Ldap) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{8}
}

func (x *Ldap) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Ldap) GetUserDnTemplate() string {
	if x != nil {
		return x.UserDnTemplate
	}
	return ""
}

func (x *Ldap) GetMembershipAttributeName() string {
	if x != nil {
		return x.MembershipAttributeName
	}
	return ""
}

func (x *Ldap) GetAllowedGroups() []string {
	if x != nil {
		return x.AllowedGroups
	}
	return nil
}

func (x *Ldap) GetPool() *Ldap_ConnectionPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

// Authorizes requests by querying a custom extauth server.
type PassThroughAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Protocol:
	//	*PassThroughAuth_Grpc
	Protocol isPassThroughAuth_Protocol `protobuf_oneof:"protocol"`
	// Custom config to be passed per request to the passthrough auth service.
	Config *_struct.Struct `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *PassThroughAuth) Reset() {
	*x = PassThroughAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassThroughAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassThroughAuth) ProtoMessage() {}

func (x *PassThroughAuth) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassThroughAuth.ProtoReflect.Descriptor instead.
func (*PassThroughAuth) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{9}
}

func (m *PassThroughAuth) GetProtocol() isPassThroughAuth_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *PassThroughAuth) GetGrpc() *PassThroughGrpc {
	if x, ok := x.GetProtocol().(*PassThroughAuth_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (x *PassThroughAuth) GetConfig() *_struct.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

type isPassThroughAuth_Protocol interface {
	isPassThroughAuth_Protocol()
}

type PassThroughAuth_Grpc struct {
	Grpc *PassThroughGrpc `protobuf:"bytes,1,opt,name=grpc,proto3,oneof"`
}

func (*PassThroughAuth_Grpc) isPassThroughAuth_Protocol() {}

// Authorizes requests by querying a custom extauth grpc server
// Assumes that the server implements the envoy external authorization spec:
// https://github.com/envoyproxy/envoy/blob/ae1ed1fa74f096dabe8dd5b19fc70333621b0309/api/envoy/service/auth/v3/external_auth.proto#L29
type PassThroughGrpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Address of the auth server to query. Should be in the form ADDRESS:PORT, e.g. `default.svc.cluster.local:389`.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Timeout for the auth server to respond. Defaults to 5s
	ConnectionTimeout *duration.Duration `protobuf:"bytes,2,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`
}

func (x *PassThroughGrpc) Reset() {
	*x = PassThroughGrpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PassThroughGrpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PassThroughGrpc) ProtoMessage() {}

func (x *PassThroughGrpc) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PassThroughGrpc.ProtoReflect.Descriptor instead.
func (*PassThroughGrpc) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{10}
}

func (x *PassThroughGrpc) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PassThroughGrpc) GetConnectionTimeout() *duration.Duration {
	if x != nil {
		return x.ConnectionTimeout
	}
	return nil
}

// The current status of the `ExtAuthConfig`.
type ExtAuthConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the `ExtAuthConfig`.
	State ExtAuthConfigStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=extauth.solo.io.ExtAuthConfigStatus_State" json:"state,omitempty"`
	// A human-readable string explaining the status.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The observed generation of the resource.
	// When this matches the metadata.generation of the resource, it indicates the status is up-to-date.
	ObservedGeneration int64 `protobuf:"varint,3,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
}

func (x *ExtAuthConfigStatus) Reset() {
	*x = ExtAuthConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigStatus) ProtoMessage() {}

func (x *ExtAuthConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigStatus.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{11}
}

func (x *ExtAuthConfigStatus) GetState() ExtAuthConfigStatus_State {
	if x != nil {
		return x.State
	}
	return ExtAuthConfigStatus_PENDING
}

func (x *ExtAuthConfigStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExtAuthConfigStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

type ExtAuthConfigSpec_OidcAuthorizationCodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// your client id as registered with the issuer
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// your client secret as registered with the issuer
	ClientSecret string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The url of the issuer. We will look for OIDC information in issuerUrl+
	// ".well-known/openid-configuration"
	IssuerUrl string `protobuf:"bytes,3,opt,name=issuer_url,json=issuerUrl,proto3" json:"issuer_url,omitempty"`
	// extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider.
	// this can be useful for flows such as PKCE (https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_challenge` and `code_challenge_method`.
	AuthEndpointQueryParams map[string]string `protobuf:"bytes,4,rep,name=auth_endpoint_query_params,json=authEndpointQueryParams,proto3" json:"auth_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// extra query parameters to apply to the Ext-Auth service's token request to the identity provider.
	// this can be useful for flows such as PKCE (https://www.oauth.com/oauth2-servers/pkce/authorization-request/)
	// to set the `code_verifier`.
	TokenEndpointQueryParams map[string]string `protobuf:"bytes,14,rep,name=token_endpoint_query_params,json=tokenEndpointQueryParams,proto3" json:"token_endpoint_query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// we to redirect after successful auth, if we can't determine the original
	// url this should be your publicly available app url.
	AppUrl string `protobuf:"bytes,5,opt,name=app_url,json=appUrl,proto3" json:"app_url,omitempty"`
	// a callback path relative to app url that will be used for OIDC callbacks.
	// needs to not be used by the application
	CallbackPath string `protobuf:"bytes,6,opt,name=callback_path,json=callbackPath,proto3" json:"callback_path,omitempty"`
	// a path relative to app url that will be used for logging out from an OIDC session.
	// should not be used by the application.
	// If not provided, logout functionality will be disabled.
	LogoutPath string `protobuf:"bytes,9,opt,name=logout_path,json=logoutPath,proto3" json:"logout_path,omitempty"`
	// url to redirect to after logout.
	// This should be a publicly available URL. If not provided, will default to the `app_url`.
	AfterLogoutUrl string `protobuf:"bytes,15,opt,name=after_logout_url,json=afterLogoutUrl,proto3" json:"after_logout_url,omitempty"`
	// scopes to request in addition to the openid scope.
	Scopes  []string     `protobuf:"bytes,7,rep,name=scopes,proto3" json:"scopes,omitempty"`
	Session *UserSession `protobuf:"bytes,8,opt,name=session,proto3" json:"session,omitempty"`
	// Configures headers added to requests.
	Headers *HeaderConfiguration `protobuf:"bytes,10,opt,name=headers,proto3" json:"headers,omitempty"`
	// OIDC configuration is discovered at <issuerUrl>/.well-known/openid-configuration
	// The configuration override defines any properties that should override this discovery configuration
	// For example, the following AuthConfig CRD could be defined as:
	//    ```yaml
	//    apiVersion: enterprise.gloo.solo.io/v1
	//    kind: AuthConfig
	//    metadata:
	//      name: google-oidc
	//      namespace: gloo-system
	//    spec:
	//      configs:
	//      - oauth:
	//          app_url: http://localhost:8080
	//          callback_path: /callback
	//          client_id: $CLIENT_ID
	//          client_secret_ref:
	//            name: google
	//            namespace: gloo-system
	//          issuer_url: https://accounts.google.com
	//          discovery_override:
	//            token_endpoint: "https://token.url/gettoken"
	//    ```
	//
	// And this will ensure that regardless of what value is discovered at
	// <issuerUrl>/.well-known/openid-configuration, "https://token.url/gettoken" will be used as the token endpoint
	DiscoveryOverride *DiscoveryOverride `protobuf:"bytes,11,opt,name=discovery_override,json=discoveryOverride,proto3" json:"discovery_override,omitempty"`
	// The interval at which OIDC configuration is discovered at <issuerUrl>/.well-known/openid-configuration
	// If not specified, the default value is 30 minutes.
	DiscoveryPollInterval *duration.Duration `protobuf:"bytes,12,opt,name=discovery_poll_interval,json=discoveryPollInterval,proto3" json:"discovery_poll_interval,omitempty"`
	// If a user executes a request with a key that is not found in the JWKS, it could be
	// that the keys have rotated on the remote source, and not yet in the local cache.
	// This policy lets you define the behavior for how to refresh the local cache during a request
	// where an invalid key is provided
	JwksCacheRefreshPolicy *JwksOnDemandCacheRefreshPolicy `protobuf:"bytes,13,opt,name=jwks_cache_refresh_policy,json=jwksCacheRefreshPolicy,proto3" json:"jwks_cache_refresh_policy,omitempty"`
	// If set, the randomly generated session id will be sent to the token endpoint as part of the code exchange
	// The session id is used as the key for sessions in Redis
	SessionIdHeaderName string `protobuf:"bytes,16,opt,name=session_id_header_name,json=sessionIdHeaderName,proto3" json:"session_id_header_name,omitempty"`
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) Reset() {
	*x = ExtAuthConfigSpec_OidcAuthorizationCodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_OidcAuthorizationCodeConfig) ProtoMessage() {}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_OidcAuthorizationCodeConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_OidcAuthorizationCodeConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetIssuerUrl() string {
	if x != nil {
		return x.IssuerUrl
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetAuthEndpointQueryParams() map[string]string {
	if x != nil {
		return x.AuthEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetTokenEndpointQueryParams() map[string]string {
	if x != nil {
		return x.TokenEndpointQueryParams
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetCallbackPath() string {
	if x != nil {
		return x.CallbackPath
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetLogoutPath() string {
	if x != nil {
		return x.LogoutPath
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetAfterLogoutUrl() string {
	if x != nil {
		return x.AfterLogoutUrl
	}
	return ""
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetSession() *UserSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetHeaders() *HeaderConfiguration {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetDiscoveryOverride() *DiscoveryOverride {
	if x != nil {
		return x.DiscoveryOverride
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetDiscoveryPollInterval() *duration.Duration {
	if x != nil {
		return x.DiscoveryPollInterval
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetJwksCacheRefreshPolicy() *JwksOnDemandCacheRefreshPolicy {
	if x != nil {
		return x.JwksCacheRefreshPolicy
	}
	return nil
}

func (x *ExtAuthConfigSpec_OidcAuthorizationCodeConfig) GetSessionIdHeaderName() string {
	if x != nil {
		return x.SessionIdHeaderName
	}
	return ""
}

type ExtAuthConfigSpec_AccessTokenValidationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValidationType:
	//	*ExtAuthConfigSpec_AccessTokenValidationConfig_Jwt
	//	*ExtAuthConfigSpec_AccessTokenValidationConfig_Introspection
	ValidationType isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType `protobuf_oneof:"validation_type"`
	// The URL for the OIDC userinfo endpoint.
	// If provided, the (opaque) access token provided or received from the oauth endpoint
	// will be queried and the userinfo response (or cached response) will be added to the
	// `AuthorizationRequest` state under the "introspection" key.
	// This can be useful to leverage the userinfo response in, for example, an external auth server plugin.
	UserinfoUrl string `protobuf:"bytes,4,opt,name=userinfo_url,json=userinfoUrl,proto3" json:"userinfo_url,omitempty"`
	// How long the token introspection and userinfo endpoint response for a specific access token should be kept
	// in the in-memory cache. The result will be invalidated at this timeout, or at "exp" time from the introspection
	// result, whichever comes sooner. If omitted, defaults to 10 minutes. If zero, then no caching will be done.
	CacheTimeout *duration.Duration `protobuf:"bytes,5,opt,name=cache_timeout,json=cacheTimeout,proto3" json:"cache_timeout,omitempty"`
	// Optional criteria for validating the scopes of a token.
	//
	// Types that are assignable to ScopeValidation:
	//	*ExtAuthConfigSpec_AccessTokenValidationConfig_RequiredScopes
	ScopeValidation isExtAuthConfigSpec_AccessTokenValidationConfig_ScopeValidation `protobuf_oneof:"scope_validation"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ExtAuthConfigSpec_AccessTokenValidationConfig) GetValidationType() isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType {
	if m != nil {
		return m.ValidationType
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) GetJwt() *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation {
	if x, ok := x.GetValidationType().(*ExtAuthConfigSpec_AccessTokenValidationConfig_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) GetIntrospection() *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation {
	if x, ok := x.GetValidationType().(*ExtAuthConfigSpec_AccessTokenValidationConfig_Introspection); ok {
		return x.Introspection
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) GetUserinfoUrl() string {
	if x != nil {
		return x.UserinfoUrl
	}
	return ""
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) GetCacheTimeout() *duration.Duration {
	if x != nil {
		return x.CacheTimeout
	}
	return nil
}

func (m *ExtAuthConfigSpec_AccessTokenValidationConfig) GetScopeValidation() isExtAuthConfigSpec_AccessTokenValidationConfig_ScopeValidation {
	if m != nil {
		return m.ScopeValidation
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig) GetRequiredScopes() *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList {
	if x, ok := x.GetScopeValidation().(*ExtAuthConfigSpec_AccessTokenValidationConfig_RequiredScopes); ok {
		return x.RequiredScopes
	}
	return nil
}

type isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType interface {
	isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType()
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_Jwt struct {
	// Validate access tokens that conform to the
	// [JSON Web Token (JWT)](https://tools.ietf.org/html/rfc7519) specification.
	Jwt *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation `protobuf:"bytes,2,opt,name=jwt,proto3,oneof"`
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_Introspection struct {
	// Defines how (opaque) access tokens, received from the oauth authorization endpoint, are validated
	// [OAuth2.0 Token Introspection](https://tools.ietf.org/html/rfc7662) specification.
	Introspection *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation `protobuf:"bytes,3,opt,name=introspection,proto3,oneof"`
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_Jwt) isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType() {
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_Introspection) isExtAuthConfigSpec_AccessTokenValidationConfig_ValidationType() {
}

type isExtAuthConfigSpec_AccessTokenValidationConfig_ScopeValidation interface {
	isExtAuthConfigSpec_AccessTokenValidationConfig_ScopeValidation()
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_RequiredScopes struct {
	// Require access token to have all of the scopes in the given list.
	// This configuration applies to both opaque and JWT tokens. In the case of opaque tokens,
	// this will check the scopes returned in the "scope" member of introspection response
	// (as described in [Section 2.2 of RFC7662](https://tools.ietf.org/html/rfc7662#section-2.2).
	// In case of JWTs the scopes to be validated are expected to be contained in the "scope" claim of the
	// token in the form of a space-separated string.
	// Omitting this field means that scope validation will be skipped.
	RequiredScopes *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList `protobuf:"bytes,6,opt,name=required_scopes,json=requiredScopes,proto3,oneof"`
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_RequiredScopes) isExtAuthConfigSpec_AccessTokenValidationConfig_ScopeValidation() {
}

type ExtAuthConfigSpec_OAuth2Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OauthType:
	//	*ExtAuthConfigSpec_OAuth2Config_OidcAuthorizationCode
	//	*ExtAuthConfigSpec_OAuth2Config_AccessTokenValidationConfig
	OauthType isExtAuthConfigSpec_OAuth2Config_OauthType `protobuf_oneof:"oauth_type"`
}

func (x *ExtAuthConfigSpec_OAuth2Config) Reset() {
	*x = ExtAuthConfigSpec_OAuth2Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_OAuth2Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_OAuth2Config) ProtoMessage() {}

func (x *ExtAuthConfigSpec_OAuth2Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_OAuth2Config.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_OAuth2Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 2}
}

func (m *ExtAuthConfigSpec_OAuth2Config) GetOauthType() isExtAuthConfigSpec_OAuth2Config_OauthType {
	if m != nil {
		return m.OauthType
	}
	return nil
}

func (x *ExtAuthConfigSpec_OAuth2Config) GetOidcAuthorizationCode() *ExtAuthConfigSpec_OidcAuthorizationCodeConfig {
	if x, ok := x.GetOauthType().(*ExtAuthConfigSpec_OAuth2Config_OidcAuthorizationCode); ok {
		return x.OidcAuthorizationCode
	}
	return nil
}

func (x *ExtAuthConfigSpec_OAuth2Config) GetAccessTokenValidationConfig() *ExtAuthConfigSpec_AccessTokenValidationConfig {
	if x, ok := x.GetOauthType().(*ExtAuthConfigSpec_OAuth2Config_AccessTokenValidationConfig); ok {
		return x.AccessTokenValidationConfig
	}
	return nil
}

type isExtAuthConfigSpec_OAuth2Config_OauthType interface {
	isExtAuthConfigSpec_OAuth2Config_OauthType()
}

type ExtAuthConfigSpec_OAuth2Config_OidcAuthorizationCode struct {
	// provide issuer location and let gloo handle OIDC flow for you.
	// requests authorized by validating the contents of ID token.
	// can also authorize the access token if configured.
	OidcAuthorizationCode *ExtAuthConfigSpec_OidcAuthorizationCodeConfig `protobuf:"bytes,1,opt,name=oidc_authorization_code,json=oidcAuthorizationCode,proto3,oneof"`
}

type ExtAuthConfigSpec_OAuth2Config_AccessTokenValidationConfig struct {
	// provide the access token on the request and let gloo handle authorization.
	//
	// according to https://tools.ietf.org/html/rfc6750 you can pass tokens through:
	// - form-encoded body parameter. recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123
	// - URI query parameter e.g. access_token=mytoken123
	// - and (preferably) secure cookies
	AccessTokenValidationConfig *ExtAuthConfigSpec_AccessTokenValidationConfig `protobuf:"bytes,3,opt,name=access_token_validation_config,json=accessTokenValidationConfig,proto3,oneof"`
}

func (*ExtAuthConfigSpec_OAuth2Config_OidcAuthorizationCode) isExtAuthConfigSpec_OAuth2Config_OauthType() {
}

func (*ExtAuthConfigSpec_OAuth2Config_AccessTokenValidationConfig) isExtAuthConfigSpec_OAuth2Config_OauthType() {
}

// **NOTE: This configuration is not user-facing and will be auto generated**
type ExtAuthConfigSpec_ApiKeyAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A mapping of valid API keys to their associated metadata.
	// This map is automatically populated with the information from the relevant `ApiKeySecret`s.
	ValidApiKeys map[string]*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata `protobuf:"bytes,1,rep,name=valid_api_keys,json=validApiKeys,proto3" json:"valid_api_keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Optional) When receiving a request, the Gloo Edge Enterprise external auth server will look for an API key
	// in a header with this name. This field is optional; if not provided it defaults to `api-key`.
	HeaderName string `protobuf:"bytes,2,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// Determines the key metadata that will be included as headers on the upstream request.
	// Each entry represents a header to add: the key is the name of the header, and the
	// value is the key that will be used to look up the data entry in the key metadata.
	HeadersFromKeyMetadata map[string]string `protobuf:"bytes,3,rep,name=headers_from_key_metadata,json=headersFromKeyMetadata,proto3" json:"headers_from_key_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) Reset() {
	*x = ExtAuthConfigSpec_ApiKeyAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_ApiKeyAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_ApiKeyAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_ApiKeyAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) GetValidApiKeys() map[string]*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata {
	if x != nil {
		return x.ValidApiKeys
	}
	return nil
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) GetHeaderName() string {
	if x != nil {
		return x.HeaderName
	}
	return ""
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig) GetHeadersFromKeyMetadata() map[string]string {
	if x != nil {
		return x.HeadersFromKeyMetadata
	}
	return nil
}

type ExtAuthConfigSpec_OpaAuthConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional modules (filename, module content) maps containing modules assist in the resolution of `query`.
	Modules map[string]string `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The query that determines the auth decision. The result of this query must be either a boolean
	// or an array with boolean as the first element. A boolean `true` value means that the request
	// will be authorized. Any other value, or error, means that the request will be denied.
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *ExtAuthConfigSpec_OpaAuthConfig) Reset() {
	*x = ExtAuthConfigSpec_OpaAuthConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_OpaAuthConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_OpaAuthConfig) ProtoMessage() {}

func (x *ExtAuthConfigSpec_OpaAuthConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_OpaAuthConfig.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_OpaAuthConfig) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ExtAuthConfigSpec_OpaAuthConfig) GetModules() map[string]string {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *ExtAuthConfigSpec_OpaAuthConfig) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type ExtAuthConfigSpec_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional: used when defining complex boolean logic, if `boolean_expr` is defined below. Also used
	// in logging. If omitted, an automatically generated name will be used (e.g. config_0, of the
	// pattern 'config_$INDEX_IN_CHAIN'). In the case of plugin auth, this field is ignored in favor of
	// the name assigned on the plugin config itself.
	Name *wrappers.StringValue `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to AuthConfig:
	//	*ExtAuthConfigSpec_Config_Oauth2
	//	*ExtAuthConfigSpec_Config_BasicAuth
	//	*ExtAuthConfigSpec_Config_ApiKeyAuth
	//	*ExtAuthConfigSpec_Config_PluginAuth
	//	*ExtAuthConfigSpec_Config_OpaAuth
	//	*ExtAuthConfigSpec_Config_Ldap
	//	*ExtAuthConfigSpec_Config_Jwt
	//	*ExtAuthConfigSpec_Config_PassThroughAuth
	AuthConfig isExtAuthConfigSpec_Config_AuthConfig `protobuf_oneof:"auth_config"`
}

func (x *ExtAuthConfigSpec_Config) Reset() {
	*x = ExtAuthConfigSpec_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_Config) ProtoMessage() {}

func (x *ExtAuthConfigSpec_Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_Config.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_Config) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 5}
}

func (x *ExtAuthConfigSpec_Config) GetName() *wrappers.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (m *ExtAuthConfigSpec_Config) GetAuthConfig() isExtAuthConfigSpec_Config_AuthConfig {
	if m != nil {
		return m.AuthConfig
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetOauth2() *ExtAuthConfigSpec_OAuth2Config {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_Oauth2); ok {
		return x.Oauth2
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetBasicAuth() *BasicAuth {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_BasicAuth); ok {
		return x.BasicAuth
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetApiKeyAuth() *ExtAuthConfigSpec_ApiKeyAuthConfig {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_ApiKeyAuth); ok {
		return x.ApiKeyAuth
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetPluginAuth() *AuthPlugin {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_PluginAuth); ok {
		return x.PluginAuth
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetOpaAuth() *ExtAuthConfigSpec_OpaAuthConfig {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_OpaAuth); ok {
		return x.OpaAuth
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetLdap() *Ldap {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_Ldap); ok {
		return x.Ldap
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetJwt() *empty.Empty {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_Jwt); ok {
		return x.Jwt
	}
	return nil
}

func (x *ExtAuthConfigSpec_Config) GetPassThroughAuth() *PassThroughAuth {
	if x, ok := x.GetAuthConfig().(*ExtAuthConfigSpec_Config_PassThroughAuth); ok {
		return x.PassThroughAuth
	}
	return nil
}

type isExtAuthConfigSpec_Config_AuthConfig interface {
	isExtAuthConfigSpec_Config_AuthConfig()
}

type ExtAuthConfigSpec_Config_Oauth2 struct {
	Oauth2 *ExtAuthConfigSpec_OAuth2Config `protobuf:"bytes,9,opt,name=oauth2,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_BasicAuth struct {
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=basic_auth,json=basicAuth,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_ApiKeyAuth struct {
	ApiKeyAuth *ExtAuthConfigSpec_ApiKeyAuthConfig `protobuf:"bytes,5,opt,name=api_key_auth,json=apiKeyAuth,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_PluginAuth struct {
	PluginAuth *AuthPlugin `protobuf:"bytes,6,opt,name=plugin_auth,json=pluginAuth,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_OpaAuth struct {
	OpaAuth *ExtAuthConfigSpec_OpaAuthConfig `protobuf:"bytes,7,opt,name=opa_auth,json=opaAuth,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_Ldap struct {
	Ldap *Ldap `protobuf:"bytes,8,opt,name=ldap,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_Jwt struct {
	// This is a "dummy" extauth service which can be used to support multiple auth mechanisms with JWT authentication.
	// If Jwt authentication is to be used in the [boolean expression](https://docs.solo.io/gloo-edge/latest/reference/api/github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/options/extauth/v1/extauth.proto.sk/#authconfig) in an AuthConfig, you can use this auth config type to include Jwt as an Auth config.
	// In addition, `allow_missing_or_failed_jwt` must be set on the Virtual Host or Route that uses JWT auth or else the JWT filter will short circuit this behaviour.
	Jwt *empty.Empty `protobuf:"bytes,12,opt,name=jwt,proto3,oneof"`
}

type ExtAuthConfigSpec_Config_PassThroughAuth struct {
	PassThroughAuth *PassThroughAuth `protobuf:"bytes,13,opt,name=pass_through_auth,json=passThroughAuth,proto3,oneof"`
}

func (*ExtAuthConfigSpec_Config_Oauth2) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_BasicAuth) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_ApiKeyAuth) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_PluginAuth) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_OpaAuth) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_Ldap) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_Jwt) isExtAuthConfigSpec_Config_AuthConfig() {}

func (*ExtAuthConfigSpec_Config_PassThroughAuth) isExtAuthConfigSpec_Config_AuthConfig() {}

// Defines how JSON Web Token (JWT) access tokens are validated.
//
// Tokens are validated using a JSON Web Key Set (as defined in
// [Section 5 of RFC7517](https://tools.ietf.org/html/rfc7517#section-5)),
// which can be either inlined in the configuration or fetched from a remote location via HTTP.
// Any keys in the JWKS that are not intended for signature verification (i.e. whose
// ["use" parameter](https://tools.ietf.org/html/rfc7517#section-4.2) is not "sig")
// will be ignored by the system, as will keys that do not specify a
// ["kid" (Key ID) parameter](https://tools.ietf.org/html/rfc7517#section-4.2).
//
// The JWT to be validated must define non-empty "kid" and "alg" headers. The "kid" header
// determines which key in the JWKS will be used to verify the signature of the token;
// if no matching key is found, the token will be rejected.
//
// If present, the server will verify the "exp", "iat", and "nbf" standard JWT claims.
// Validation of the "iss" claim and of token scopes can be configured as well.
// If the JWT has been successfully validated, its set of claims will be added to the
// `AuthorizationRequest` state under the "jwtAccessToken" key.
type ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to JwksSourceSpecifier:
	//	*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks_
	//	*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks_
	JwksSourceSpecifier isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier `protobuf_oneof:"jwks_source_specifier"`
	// Allow only tokens that have been issued by this principal (i.e. whose "iss" claim matches this value).
	// If empty, issuer validation will be skipped.
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (m *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) GetJwksSourceSpecifier() isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier {
	if m != nil {
		return m.JwksSourceSpecifier
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) GetRemoteJwks() *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks {
	if x, ok := x.GetJwksSourceSpecifier().(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks_); ok {
		return x.RemoteJwks
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) GetLocalJwks() *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks {
	if x, ok := x.GetJwksSourceSpecifier().(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks_); ok {
		return x.LocalJwks
	}
	return nil
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

type isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier interface {
	isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier()
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks_ struct {
	// Fetches the JWKS from a remote location.
	RemoteJwks *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks `protobuf:"bytes,1,opt,name=remote_jwks,json=remoteJwks,proto3,oneof"`
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks_ struct {
	// Loads the JWKS from a local data source.
	LocalJwks *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks `protobuf:"bytes,2,opt,name=local_jwks,json=localJwks,proto3,oneof"`
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks_) isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier() {
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks_) isExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_JwksSourceSpecifier() {
}

// Defines how (opaque) access tokens, received from the oauth authorization endpoint, are validated
// [OAuth2.0 Token Introspection](https://tools.ietf.org/html/rfc7662)
//
// If the token introspection url requires client authentication, both the client_id and client_secret
// are required. If only one is provided, the config will be rejected.
// These values will be encoded in a basic auth header in order to authenticate the client.
type ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL for the [OAuth2.0 Token Introspection](https://tools.ietf.org/html/rfc7662) endpoint.
	// If provided, the (opaque) access token provided or received from the oauth authorization endpoint
	// will be validated against this endpoint, or locally cached responses for this access token.
	IntrospectionUrl string `protobuf:"bytes,1,opt,name=introspection_url,json=introspectionUrl,proto3" json:"introspection_url,omitempty"`
	// Your client id as registered with the issuer.
	// Optional: Use if the token introspection url requires client authentication.
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Your client secret as registered with the issuer.
	// Optional: Use if the token introspection url requires client authentication.
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// The name of the [introspection response](https://tools.ietf.org/html/rfc7662#section-2.2)
	// attribute that contains the ID of the resource owner (e.g. `sub`, `username`).
	// If specified, the external auth server will use the value of the attribute as the identifier of the
	// authenticated user and add it to the request headers and/or dynamic metadata (depending on how the
	// server is configured); if the field is set and the attribute cannot be found, the request will be denied.
	// This field is optional and by default the server will not try to derive the user ID.
	UserIdAttributeName string `protobuf:"bytes,4,opt,name=user_id_attribute_name,json=userIdAttributeName,proto3" json:"user_id_attribute_name,omitempty"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) GetIntrospectionUrl() string {
	if x != nil {
		return x.IntrospectionUrl
	}
	return ""
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation) GetUserIdAttributeName() string {
	if x != nil {
		return x.UserIdAttributeName
	}
	return ""
}

type ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scope []string `protobuf:"bytes,1,rep,name=scope,proto3" json:"scope,omitempty"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1, 2}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

// Specifies how to fetch JWKS from remote and how to cache it.
type ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTTP URI to fetch the JWKS.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The frequency at which the JWKS should be refreshed.
	// If not specified, the default value is 5 minutes.
	RefreshInterval *duration.Duration `protobuf:"bytes,2,opt,name=refresh_interval,json=refreshInterval,proto3" json:"refresh_interval,omitempty"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1, 0, 0}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks) GetRefreshInterval() *duration.Duration {
	if x != nil {
		return x.RefreshInterval
	}
	return nil
}

// Represents a locally available JWKS.
type ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JWKS is embedded as a string.
	InlineString string `protobuf:"bytes,1,opt,name=inline_string,json=inlineString,proto3" json:"inline_string,omitempty"`
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) Reset() {
	*x = ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) ProtoMessage() {}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 1, 0, 1}
}

func (x *ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks) GetInlineString() string {
	if x != nil {
		return x.InlineString
	}
	return ""
}

type ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user is mapped as the name of `Secret` which contains the `ApiKeySecret`
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// The metadata present on the `ApiKeySecret`.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) Reset() {
	*x = ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) ProtoMessage() {}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata.ProtoReflect.Descriptor instead.
func (*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type BasicAuth_Apr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users map[string]*BasicAuth_Apr_SaltedHashedPassword `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BasicAuth_Apr) Reset() {
	*x = BasicAuth_Apr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuth_Apr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuth_Apr) ProtoMessage() {}

func (x *BasicAuth_Apr) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuth_Apr.ProtoReflect.Descriptor instead.
func (*BasicAuth_Apr) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BasicAuth_Apr) GetUsers() map[string]*BasicAuth_Apr_SaltedHashedPassword {
	if x != nil {
		return x.Users
	}
	return nil
}

type BasicAuth_Apr_SaltedHashedPassword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt           string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	HashedPassword string `protobuf:"bytes,2,opt,name=hashed_password,json=hashedPassword,proto3" json:"hashed_password,omitempty"`
}

func (x *BasicAuth_Apr_SaltedHashedPassword) Reset() {
	*x = BasicAuth_Apr_SaltedHashedPassword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAuth_Apr_SaltedHashedPassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAuth_Apr_SaltedHashedPassword) ProtoMessage() {}

func (x *BasicAuth_Apr_SaltedHashedPassword) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAuth_Apr_SaltedHashedPassword.ProtoReflect.Descriptor instead.
func (*BasicAuth_Apr_SaltedHashedPassword) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *BasicAuth_Apr_SaltedHashedPassword) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *BasicAuth_Apr_SaltedHashedPassword) GetHashedPassword() string {
	if x != nil {
		return x.HashedPassword
	}
	return ""
}

type UserSession_InternalSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserSession_InternalSession) Reset() {
	*x = UserSession_InternalSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession_InternalSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession_InternalSession) ProtoMessage() {}

func (x *UserSession_InternalSession) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession_InternalSession.ProtoReflect.Descriptor instead.
func (*UserSession_InternalSession) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{4, 0}
}

type UserSession_RedisSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options to connect to redis
	Options *RedisOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// Key prefix inside redis
	KeyPrefix string `protobuf:"bytes,2,opt,name=key_prefix,json=keyPrefix,proto3" json:"key_prefix,omitempty"`
	// Cookie name to set and store the session id. If empty the default "__session" is used.
	CookieName string `protobuf:"bytes,3,opt,name=cookie_name,json=cookieName,proto3" json:"cookie_name,omitempty"`
	// When set, refresh expired id-tokens using the refresh-token. Defaults to true.
	// Explicitly set to false to disable refreshing.
	AllowRefreshing *wrappers.BoolValue `protobuf:"bytes,4,opt,name=allow_refreshing,json=allowRefreshing,proto3" json:"allow_refreshing,omitempty"`
}

func (x *UserSession_RedisSession) Reset() {
	*x = UserSession_RedisSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession_RedisSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession_RedisSession) ProtoMessage() {}

func (x *UserSession_RedisSession) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession_RedisSession.ProtoReflect.Descriptor instead.
func (*UserSession_RedisSession) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{4, 1}
}

func (x *UserSession_RedisSession) GetOptions() *RedisOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *UserSession_RedisSession) GetKeyPrefix() string {
	if x != nil {
		return x.KeyPrefix
	}
	return ""
}

func (x *UserSession_RedisSession) GetCookieName() string {
	if x != nil {
		return x.CookieName
	}
	return ""
}

func (x *UserSession_RedisSession) GetAllowRefreshing() *wrappers.BoolValue {
	if x != nil {
		return x.AllowRefreshing
	}
	return nil
}

type UserSession_CookieOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max age for the cookie. Leave unset for a default of 30 days (2592000 seconds).
	// To disable cookie expiry, set explicitly to 0.
	MaxAge *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Use a non-secure cookie. Note - this should only be used for testing and in trusted
	// environments.
	NotSecure bool `protobuf:"varint,2,opt,name=not_secure,json=notSecure,proto3" json:"not_secure,omitempty"`
	// Path of the cookie. If unset, defaults to "/". Set it explicitly to "" to avoid setting a
	// path.
	Path *wrappers.StringValue `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Cookie domain
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *UserSession_CookieOptions) Reset() {
	*x = UserSession_CookieOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSession_CookieOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSession_CookieOptions) ProtoMessage() {}

func (x *UserSession_CookieOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSession_CookieOptions.ProtoReflect.Descriptor instead.
func (*UserSession_CookieOptions) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{4, 2}
}

func (x *UserSession_CookieOptions) GetMaxAge() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxAge
	}
	return nil
}

func (x *UserSession_CookieOptions) GetNotSecure() bool {
	if x != nil {
		return x.NotSecure
	}
	return false
}

func (x *UserSession_CookieOptions) GetPath() *wrappers.StringValue {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *UserSession_CookieOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Configuration properties for pooling connections to the LDAP server. If the pool is exhausted when a connection
// is requested (meaning that all the polled connections are in use), the connection will be created on the fly.
type Ldap_ConnectionPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum number connections that are pooled at any give time. The default value is 5.
	MaxSize *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	// Number of connections that the pool will be pre-populated with upon initialization. The default value is 2.
	InitialSize *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=initialSize,proto3" json:"initialSize,omitempty"`
}

func (x *Ldap_ConnectionPool) Reset() {
	*x = Ldap_ConnectionPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ldap_ConnectionPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ldap_ConnectionPool) ProtoMessage() {}

func (x *Ldap_ConnectionPool) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ldap_ConnectionPool.ProtoReflect.Descriptor instead.
func (*Ldap_ConnectionPool) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Ldap_ConnectionPool) GetMaxSize() *wrappers.UInt32Value {
	if x != nil {
		return x.MaxSize
	}
	return nil
}

func (x *Ldap_ConnectionPool) GetInitialSize() *wrappers.UInt32Value {
	if x != nil {
		return x.InitialSize
	}
	return nil
}

var File_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto protoreflect.FileDescriptor

var file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x65, 0x78,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xea, 0x22, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x1a, 0xb6, 0x09,
	0x0a, 0x1b, 0x4f, 0x69, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xc8, 0xf5, 0x04, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x98, 0x01, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x65, 0x78, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x69,
	0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x9b, 0x01, 0x0a, 0x1b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x70, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x6a, 0x0a, 0x19,
	0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4a, 0x77, 0x6b, 0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x16, 0x6a, 0x77, 0x6b, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4a, 0x0a,
	0x1c, 0x41, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xb7, 0x09, 0x0a, 0x1b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x77, 0x74, 0x12, 0x7e, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x72,
	0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x0d, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x73, 0x0a, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x01,
	0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x1a, 0xcd, 0x03, 0x0a, 0x0d, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7a, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6a, 0x77, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x77,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6a, 0x77, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x77, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x1a,
	0x64, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4a, 0x77, 0x6b, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x44, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x30, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4a, 0x77,
	0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x17, 0x0a, 0x15, 0x6a, 0x77, 0x6b, 0x73, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0xc3, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xc8,
	0xf5, 0x04, 0x01, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x21, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xa4, 0x02, 0x0a, 0x0c, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x78, 0x0a, 0x17, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x69, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x69, 0x64, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x1e,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x1b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x1a, 0xd5, 0x05, 0x0a, 0x10, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x71, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xc8, 0xf5, 0x04,
	0x01, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x19, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46, 0x72,
	0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd1, 0x01,
	0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x69, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x65, 0x78,
	0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x80, 0x01, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x65,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xba, 0x01, 0x0a, 0x0d, 0x4f, 0x70, 0x61, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x57, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x70, 0x61, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xee, 0x04, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x74, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x61,
	0x75, 0x74, 0x68, 0x32, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x41, 0x75, 0x74, 0x68, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x57, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0b, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x08, 0x6f, 0x70,
	0x61, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65,
	0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45,
	0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x4f, 0x70, 0x61, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x07, 0x6f, 0x70, 0x61, 0x41, 0x75, 0x74, 0x68, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x64, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x64, 0x61, 0x70, 0x48, 0x00,
	0x52, 0x04, 0x6c, 0x64, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x03, 0x6a,
	0x77, 0x74, 0x12, 0x4e, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x75, 0x74, 0x68, 0x48,
	0x00, 0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x41, 0x75,
	0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xad, 0x01,
	0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe0, 0x02,
	0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x61, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c,
	0x6d, 0x12, 0x30, 0x0a, 0x03, 0x61, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x72, 0x52, 0x03,
	0x61, 0x70, 0x72, 0x1a, 0x8a, 0x02, 0x0a, 0x03, 0x41, 0x70, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x14,
	0x53, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x1a, 0x6d, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x49, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x70, 0x72,
	0x2e, 0x53, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x64, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xbf, 0x05, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x4f, 0x6e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12,
	0x41, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x1a, 0x11, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xce, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x1a, 0xaf, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x6b, 0x69,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x13, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0xb4, 0x02, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x75, 0x74, 0x68, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x67, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x4a, 0x77,
	0x6b, 0x73, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x05,
	0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x06,
	0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x47,
	0x0a, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x1b, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x70, 0x52, 0x65, 0x71, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xed, 0x02, 0x0a, 0x04, 0x4c, 0x64, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x44, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x04,
	0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4c, 0x64, 0x61,
	0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x04, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x88, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x41, 0x75, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x73, 0x6f,
	0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x47, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x2f, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x75, 0x0a, 0x0f, 0x50, 0x61,
	0x73, 0x73, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x47, 0x72, 0x70, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x74, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x78, 0x74, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x54, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x65,
	0x78, 0x74, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x78, 0x74, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0xb8, 0xf5, 0x04, 0x01, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescOnce sync.Once
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescData = file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDesc
)

func file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescData)
	})
	return file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDescData
}

var file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_goTypes = []interface{}{
	(ExtAuthConfigStatus_State)(0),                        // 0: extauth.solo.io.ExtAuthConfigStatus.State
	(*ExtAuthConfigSpec)(nil),                             // 1: extauth.solo.io.ExtAuthConfigSpec
	(*AuthPlugin)(nil),                                    // 2: extauth.solo.io.AuthPlugin
	(*BasicAuth)(nil),                                     // 3: extauth.solo.io.BasicAuth
	(*RedisOptions)(nil),                                  // 4: extauth.solo.io.RedisOptions
	(*UserSession)(nil),                                   // 5: extauth.solo.io.UserSession
	(*HeaderConfiguration)(nil),                           // 6: extauth.solo.io.HeaderConfiguration
	(*DiscoveryOverride)(nil),                             // 7: extauth.solo.io.DiscoveryOverride
	(*JwksOnDemandCacheRefreshPolicy)(nil),                // 8: extauth.solo.io.JwksOnDemandCacheRefreshPolicy
	(*Ldap)(nil),                                          // 9: extauth.solo.io.Ldap
	(*PassThroughAuth)(nil),                               // 10: extauth.solo.io.PassThroughAuth
	(*PassThroughGrpc)(nil),                               // 11: extauth.solo.io.PassThroughGrpc
	(*ExtAuthConfigStatus)(nil),                           // 12: extauth.solo.io.ExtAuthConfigStatus
	(*ExtAuthConfigSpec_OidcAuthorizationCodeConfig)(nil), // 13: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig
	(*ExtAuthConfigSpec_AccessTokenValidationConfig)(nil), // 14: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig
	(*ExtAuthConfigSpec_OAuth2Config)(nil),                // 15: extauth.solo.io.ExtAuthConfigSpec.OAuth2Config
	(*ExtAuthConfigSpec_ApiKeyAuthConfig)(nil),            // 16: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig
	(*ExtAuthConfigSpec_OpaAuthConfig)(nil),               // 17: extauth.solo.io.ExtAuthConfigSpec.OpaAuthConfig
	(*ExtAuthConfigSpec_Config)(nil),                      // 18: extauth.solo.io.ExtAuthConfigSpec.Config
	nil,                                                   // 19: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntry
	nil,                                                   // 20: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.TokenEndpointQueryParamsEntry
	(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation)(nil),            // 21: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation
	(*ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation)(nil),  // 22: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.IntrospectionValidation
	(*ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList)(nil),                // 23: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.ScopeList
	(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks)(nil), // 24: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.RemoteJwks
	(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks)(nil),  // 25: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.LocalJwks
	(*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata)(nil),                         // 26: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.KeyMetadata
	nil,                   // 27: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.ValidApiKeysEntry
	nil,                   // 28: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.HeadersFromKeyMetadataEntry
	nil,                   // 29: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.KeyMetadata.MetadataEntry
	nil,                   // 30: extauth.solo.io.ExtAuthConfigSpec.OpaAuthConfig.ModulesEntry
	(*BasicAuth_Apr)(nil), // 31: extauth.solo.io.BasicAuth.Apr
	(*BasicAuth_Apr_SaltedHashedPassword)(nil), // 32: extauth.solo.io.BasicAuth.Apr.SaltedHashedPassword
	nil,                                 // 33: extauth.solo.io.BasicAuth.Apr.UsersEntry
	(*UserSession_InternalSession)(nil), // 34: extauth.solo.io.UserSession.InternalSession
	(*UserSession_RedisSession)(nil),    // 35: extauth.solo.io.UserSession.RedisSession
	(*UserSession_CookieOptions)(nil),   // 36: extauth.solo.io.UserSession.CookieOptions
	(*Ldap_ConnectionPool)(nil),         // 37: extauth.solo.io.Ldap.ConnectionPool
	(*wrappers.StringValue)(nil),        // 38: google.protobuf.StringValue
	(*_struct.Struct)(nil),              // 39: google.protobuf.Struct
	(*empty.Empty)(nil),                 // 40: google.protobuf.Empty
	(*duration.Duration)(nil),           // 41: google.protobuf.Duration
	(*wrappers.BoolValue)(nil),          // 42: google.protobuf.BoolValue
	(*wrappers.UInt32Value)(nil),        // 43: google.protobuf.UInt32Value
}
var file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_depIdxs = []int32{
	18, // 0: extauth.solo.io.ExtAuthConfigSpec.configs:type_name -> extauth.solo.io.ExtAuthConfigSpec.Config
	38, // 1: extauth.solo.io.ExtAuthConfigSpec.boolean_expr:type_name -> google.protobuf.StringValue
	39, // 2: extauth.solo.io.AuthPlugin.config:type_name -> google.protobuf.Struct
	31, // 3: extauth.solo.io.BasicAuth.apr:type_name -> extauth.solo.io.BasicAuth.Apr
	36, // 4: extauth.solo.io.UserSession.cookie_options:type_name -> extauth.solo.io.UserSession.CookieOptions
	34, // 5: extauth.solo.io.UserSession.cookie:type_name -> extauth.solo.io.UserSession.InternalSession
	35, // 6: extauth.solo.io.UserSession.redis:type_name -> extauth.solo.io.UserSession.RedisSession
	40, // 7: extauth.solo.io.JwksOnDemandCacheRefreshPolicy.never:type_name -> google.protobuf.Empty
	40, // 8: extauth.solo.io.JwksOnDemandCacheRefreshPolicy.always:type_name -> google.protobuf.Empty
	37, // 9: extauth.solo.io.Ldap.pool:type_name -> extauth.solo.io.Ldap.ConnectionPool
	11, // 10: extauth.solo.io.PassThroughAuth.grpc:type_name -> extauth.solo.io.PassThroughGrpc
	39, // 11: extauth.solo.io.PassThroughAuth.config:type_name -> google.protobuf.Struct
	41, // 12: extauth.solo.io.PassThroughGrpc.connection_timeout:type_name -> google.protobuf.Duration
	0,  // 13: extauth.solo.io.ExtAuthConfigStatus.state:type_name -> extauth.solo.io.ExtAuthConfigStatus.State
	19, // 14: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.auth_endpoint_query_params:type_name -> extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.AuthEndpointQueryParamsEntry
	20, // 15: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.token_endpoint_query_params:type_name -> extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.TokenEndpointQueryParamsEntry
	5,  // 16: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.session:type_name -> extauth.solo.io.UserSession
	6,  // 17: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.headers:type_name -> extauth.solo.io.HeaderConfiguration
	7,  // 18: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.discovery_override:type_name -> extauth.solo.io.DiscoveryOverride
	41, // 19: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.discovery_poll_interval:type_name -> google.protobuf.Duration
	8,  // 20: extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig.jwks_cache_refresh_policy:type_name -> extauth.solo.io.JwksOnDemandCacheRefreshPolicy
	21, // 21: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.jwt:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation
	22, // 22: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.introspection:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.IntrospectionValidation
	41, // 23: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.cache_timeout:type_name -> google.protobuf.Duration
	23, // 24: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.required_scopes:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.ScopeList
	13, // 25: extauth.solo.io.ExtAuthConfigSpec.OAuth2Config.oidc_authorization_code:type_name -> extauth.solo.io.ExtAuthConfigSpec.OidcAuthorizationCodeConfig
	14, // 26: extauth.solo.io.ExtAuthConfigSpec.OAuth2Config.access_token_validation_config:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig
	27, // 27: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.valid_api_keys:type_name -> extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.ValidApiKeysEntry
	28, // 28: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.headers_from_key_metadata:type_name -> extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.HeadersFromKeyMetadataEntry
	30, // 29: extauth.solo.io.ExtAuthConfigSpec.OpaAuthConfig.modules:type_name -> extauth.solo.io.ExtAuthConfigSpec.OpaAuthConfig.ModulesEntry
	38, // 30: extauth.solo.io.ExtAuthConfigSpec.Config.name:type_name -> google.protobuf.StringValue
	15, // 31: extauth.solo.io.ExtAuthConfigSpec.Config.oauth2:type_name -> extauth.solo.io.ExtAuthConfigSpec.OAuth2Config
	3,  // 32: extauth.solo.io.ExtAuthConfigSpec.Config.basic_auth:type_name -> extauth.solo.io.BasicAuth
	16, // 33: extauth.solo.io.ExtAuthConfigSpec.Config.api_key_auth:type_name -> extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig
	2,  // 34: extauth.solo.io.ExtAuthConfigSpec.Config.plugin_auth:type_name -> extauth.solo.io.AuthPlugin
	17, // 35: extauth.solo.io.ExtAuthConfigSpec.Config.opa_auth:type_name -> extauth.solo.io.ExtAuthConfigSpec.OpaAuthConfig
	9,  // 36: extauth.solo.io.ExtAuthConfigSpec.Config.ldap:type_name -> extauth.solo.io.Ldap
	40, // 37: extauth.solo.io.ExtAuthConfigSpec.Config.jwt:type_name -> google.protobuf.Empty
	10, // 38: extauth.solo.io.ExtAuthConfigSpec.Config.pass_through_auth:type_name -> extauth.solo.io.PassThroughAuth
	24, // 39: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.remote_jwks:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.RemoteJwks
	25, // 40: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.local_jwks:type_name -> extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.LocalJwks
	41, // 41: extauth.solo.io.ExtAuthConfigSpec.AccessTokenValidationConfig.JwtValidation.RemoteJwks.refresh_interval:type_name -> google.protobuf.Duration
	29, // 42: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.KeyMetadata.metadata:type_name -> extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.KeyMetadata.MetadataEntry
	26, // 43: extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.ValidApiKeysEntry.value:type_name -> extauth.solo.io.ExtAuthConfigSpec.ApiKeyAuthConfig.KeyMetadata
	33, // 44: extauth.solo.io.BasicAuth.Apr.users:type_name -> extauth.solo.io.BasicAuth.Apr.UsersEntry
	32, // 45: extauth.solo.io.BasicAuth.Apr.UsersEntry.value:type_name -> extauth.solo.io.BasicAuth.Apr.SaltedHashedPassword
	4,  // 46: extauth.solo.io.UserSession.RedisSession.options:type_name -> extauth.solo.io.RedisOptions
	42, // 47: extauth.solo.io.UserSession.RedisSession.allow_refreshing:type_name -> google.protobuf.BoolValue
	43, // 48: extauth.solo.io.UserSession.CookieOptions.max_age:type_name -> google.protobuf.UInt32Value
	38, // 49: extauth.solo.io.UserSession.CookieOptions.path:type_name -> google.protobuf.StringValue
	43, // 50: extauth.solo.io.Ldap.ConnectionPool.maxSize:type_name -> google.protobuf.UInt32Value
	43, // 51: extauth.solo.io.Ldap.ConnectionPool.initialSize:type_name -> google.protobuf.UInt32Value
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_init() }
func file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_init() {
	if File_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscoveryOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwksOnDemandCacheRefreshPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ldap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassThroughAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PassThroughGrpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_OidcAuthorizationCodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_OAuth2Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_ApiKeyAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_OpaAuthConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig_IntrospectionValidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig_ScopeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtAuthConfigSpec_ApiKeyAuthConfig_KeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuth_Apr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAuth_Apr_SaltedHashedPassword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession_InternalSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession_RedisSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSession_CookieOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ldap_ConnectionPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*UserSession_Cookie)(nil),
		(*UserSession_Redis)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*JwksOnDemandCacheRefreshPolicy_Never)(nil),
		(*JwksOnDemandCacheRefreshPolicy_Always)(nil),
		(*JwksOnDemandCacheRefreshPolicy_MaxIdpReqPerPollingInterval)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PassThroughAuth_Grpc)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ExtAuthConfigSpec_AccessTokenValidationConfig_Jwt)(nil),
		(*ExtAuthConfigSpec_AccessTokenValidationConfig_Introspection)(nil),
		(*ExtAuthConfigSpec_AccessTokenValidationConfig_RequiredScopes)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ExtAuthConfigSpec_OAuth2Config_OidcAuthorizationCode)(nil),
		(*ExtAuthConfigSpec_OAuth2Config_AccessTokenValidationConfig)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ExtAuthConfigSpec_Config_Oauth2)(nil),
		(*ExtAuthConfigSpec_Config_BasicAuth)(nil),
		(*ExtAuthConfigSpec_Config_ApiKeyAuth)(nil),
		(*ExtAuthConfigSpec_Config_PluginAuth)(nil),
		(*ExtAuthConfigSpec_Config_OpaAuth)(nil),
		(*ExtAuthConfigSpec_Config_Ldap)(nil),
		(*ExtAuthConfigSpec_Config_Jwt)(nil),
		(*ExtAuthConfigSpec_Config_PassThroughAuth)(nil),
	}
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_RemoteJwks_)(nil),
		(*ExtAuthConfigSpec_AccessTokenValidationConfig_JwtValidation_LocalJwks_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_depIdxs,
		EnumInfos:         file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_enumTypes,
		MessageInfos:      file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto = out.File
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_rawDesc = nil
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_goTypes = nil
	file_github_com_solo_io_ext_auth_service_api_v1alpha1_extauth_proto_depIdxs = nil
}
