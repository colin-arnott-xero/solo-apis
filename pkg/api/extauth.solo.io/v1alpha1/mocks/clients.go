// Code generated by MockGen. DO NOT EDIT.
// Source: ./clients.go

// Package mock_v1alpha1 is a generated GoMock package.
package mock_v1alpha1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/solo-io/solo-apis/pkg/api/extauth.solo.io/v1alpha1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockMulticlusterClientset is a mock of MulticlusterClientset interface.
type MockMulticlusterClientset struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterClientsetMockRecorder
}

// MockMulticlusterClientsetMockRecorder is the mock recorder for MockMulticlusterClientset.
type MockMulticlusterClientsetMockRecorder struct {
	mock *MockMulticlusterClientset
}

// NewMockMulticlusterClientset creates a new mock instance.
func NewMockMulticlusterClientset(ctrl *gomock.Controller) *MockMulticlusterClientset {
	mock := &MockMulticlusterClientset{ctrl: ctrl}
	mock.recorder = &MockMulticlusterClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterClientset) EXPECT() *MockMulticlusterClientsetMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterClientset) Cluster(cluster string) (v1alpha1.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterClientsetMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterClientset)(nil).Cluster), cluster)
}

// MockClientset is a mock of Clientset interface.
type MockClientset struct {
	ctrl     *gomock.Controller
	recorder *MockClientsetMockRecorder
}

// MockClientsetMockRecorder is the mock recorder for MockClientset.
type MockClientsetMockRecorder struct {
	mock *MockClientset
}

// NewMockClientset creates a new mock instance.
func NewMockClientset(ctrl *gomock.Controller) *MockClientset {
	mock := &MockClientset{ctrl: ctrl}
	mock.recorder = &MockClientsetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientset) EXPECT() *MockClientsetMockRecorder {
	return m.recorder
}

// ExtAuthConfigs mocks base method.
func (m *MockClientset) ExtAuthConfigs() v1alpha1.ExtAuthConfigClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtAuthConfigs")
	ret0, _ := ret[0].(v1alpha1.ExtAuthConfigClient)
	return ret0
}

// ExtAuthConfigs indicates an expected call of ExtAuthConfigs.
func (mr *MockClientsetMockRecorder) ExtAuthConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtAuthConfigs", reflect.TypeOf((*MockClientset)(nil).ExtAuthConfigs))
}

// MockExtAuthConfigReader is a mock of ExtAuthConfigReader interface.
type MockExtAuthConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigReaderMockRecorder
}

// MockExtAuthConfigReaderMockRecorder is the mock recorder for MockExtAuthConfigReader.
type MockExtAuthConfigReaderMockRecorder struct {
	mock *MockExtAuthConfigReader
}

// NewMockExtAuthConfigReader creates a new mock instance.
func NewMockExtAuthConfigReader(ctrl *gomock.Controller) *MockExtAuthConfigReader {
	mock := &MockExtAuthConfigReader{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthConfigReader) EXPECT() *MockExtAuthConfigReaderMockRecorder {
	return m.recorder
}

// GetExtAuthConfig mocks base method.
func (m *MockExtAuthConfigReader) GetExtAuthConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.ExtAuthConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtAuthConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.ExtAuthConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtAuthConfig indicates an expected call of GetExtAuthConfig.
func (mr *MockExtAuthConfigReaderMockRecorder) GetExtAuthConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigReader)(nil).GetExtAuthConfig), ctx, key)
}

// ListExtAuthConfig mocks base method.
func (m *MockExtAuthConfigReader) ListExtAuthConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.ExtAuthConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtAuthConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ExtAuthConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtAuthConfig indicates an expected call of ListExtAuthConfig.
func (mr *MockExtAuthConfigReaderMockRecorder) ListExtAuthConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigReader)(nil).ListExtAuthConfig), varargs...)
}

// MockExtAuthConfigWriter is a mock of ExtAuthConfigWriter interface.
type MockExtAuthConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigWriterMockRecorder
}

// MockExtAuthConfigWriterMockRecorder is the mock recorder for MockExtAuthConfigWriter.
type MockExtAuthConfigWriterMockRecorder struct {
	mock *MockExtAuthConfigWriter
}

// NewMockExtAuthConfigWriter creates a new mock instance.
func NewMockExtAuthConfigWriter(ctrl *gomock.Controller) *MockExtAuthConfigWriter {
	mock := &MockExtAuthConfigWriter{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthConfigWriter) EXPECT() *MockExtAuthConfigWriterMockRecorder {
	return m.recorder
}

// CreateExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) CreateExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtAuthConfig indicates an expected call of CreateExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) CreateExtAuthConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).CreateExtAuthConfig), varargs...)
}

// DeleteAllOfExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) DeleteAllOfExtAuthConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExtAuthConfig indicates an expected call of DeleteAllOfExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) DeleteAllOfExtAuthConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).DeleteAllOfExtAuthConfig), varargs...)
}

// DeleteExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) DeleteExtAuthConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthConfig indicates an expected call of DeleteExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) DeleteExtAuthConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).DeleteExtAuthConfig), varargs...)
}

// PatchExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) PatchExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthConfig indicates an expected call of PatchExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) PatchExtAuthConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).PatchExtAuthConfig), varargs...)
}

// UpdateExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) UpdateExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthConfig indicates an expected call of UpdateExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) UpdateExtAuthConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).UpdateExtAuthConfig), varargs...)
}

// UpsertExtAuthConfig mocks base method.
func (m *MockExtAuthConfigWriter) UpsertExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, transitionFuncs ...v1alpha1.ExtAuthConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExtAuthConfig indicates an expected call of UpsertExtAuthConfig.
func (mr *MockExtAuthConfigWriterMockRecorder) UpsertExtAuthConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigWriter)(nil).UpsertExtAuthConfig), varargs...)
}

// MockExtAuthConfigStatusWriter is a mock of ExtAuthConfigStatusWriter interface.
type MockExtAuthConfigStatusWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigStatusWriterMockRecorder
}

// MockExtAuthConfigStatusWriterMockRecorder is the mock recorder for MockExtAuthConfigStatusWriter.
type MockExtAuthConfigStatusWriterMockRecorder struct {
	mock *MockExtAuthConfigStatusWriter
}

// NewMockExtAuthConfigStatusWriter creates a new mock instance.
func NewMockExtAuthConfigStatusWriter(ctrl *gomock.Controller) *MockExtAuthConfigStatusWriter {
	mock := &MockExtAuthConfigStatusWriter{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigStatusWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthConfigStatusWriter) EXPECT() *MockExtAuthConfigStatusWriterMockRecorder {
	return m.recorder
}

// PatchExtAuthConfigStatus mocks base method.
func (m *MockExtAuthConfigStatusWriter) PatchExtAuthConfigStatus(ctx context.Context, obj *v1alpha1.ExtAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthConfigStatus indicates an expected call of PatchExtAuthConfigStatus.
func (mr *MockExtAuthConfigStatusWriterMockRecorder) PatchExtAuthConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthConfigStatus", reflect.TypeOf((*MockExtAuthConfigStatusWriter)(nil).PatchExtAuthConfigStatus), varargs...)
}

// UpdateExtAuthConfigStatus mocks base method.
func (m *MockExtAuthConfigStatusWriter) UpdateExtAuthConfigStatus(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthConfigStatus indicates an expected call of UpdateExtAuthConfigStatus.
func (mr *MockExtAuthConfigStatusWriterMockRecorder) UpdateExtAuthConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthConfigStatus", reflect.TypeOf((*MockExtAuthConfigStatusWriter)(nil).UpdateExtAuthConfigStatus), varargs...)
}

// MockExtAuthConfigClient is a mock of ExtAuthConfigClient interface.
type MockExtAuthConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtAuthConfigClientMockRecorder
}

// MockExtAuthConfigClientMockRecorder is the mock recorder for MockExtAuthConfigClient.
type MockExtAuthConfigClientMockRecorder struct {
	mock *MockExtAuthConfigClient
}

// NewMockExtAuthConfigClient creates a new mock instance.
func NewMockExtAuthConfigClient(ctrl *gomock.Controller) *MockExtAuthConfigClient {
	mock := &MockExtAuthConfigClient{ctrl: ctrl}
	mock.recorder = &MockExtAuthConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtAuthConfigClient) EXPECT() *MockExtAuthConfigClientMockRecorder {
	return m.recorder
}

// CreateExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) CreateExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExtAuthConfig indicates an expected call of CreateExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) CreateExtAuthConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).CreateExtAuthConfig), varargs...)
}

// DeleteAllOfExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) DeleteAllOfExtAuthConfig(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfExtAuthConfig indicates an expected call of DeleteAllOfExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) DeleteAllOfExtAuthConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).DeleteAllOfExtAuthConfig), varargs...)
}

// DeleteExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) DeleteExtAuthConfig(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExtAuthConfig indicates an expected call of DeleteExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) DeleteExtAuthConfig(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).DeleteExtAuthConfig), varargs...)
}

// GetExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) GetExtAuthConfig(ctx context.Context, key client.ObjectKey) (*v1alpha1.ExtAuthConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtAuthConfig", ctx, key)
	ret0, _ := ret[0].(*v1alpha1.ExtAuthConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtAuthConfig indicates an expected call of GetExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) GetExtAuthConfig(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).GetExtAuthConfig), ctx, key)
}

// ListExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) ListExtAuthConfig(ctx context.Context, opts ...client.ListOption) (*v1alpha1.ExtAuthConfigList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExtAuthConfig", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ExtAuthConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExtAuthConfig indicates an expected call of ListExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) ListExtAuthConfig(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).ListExtAuthConfig), varargs...)
}

// PatchExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) PatchExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthConfig indicates an expected call of PatchExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) PatchExtAuthConfig(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).PatchExtAuthConfig), varargs...)
}

// PatchExtAuthConfigStatus mocks base method.
func (m *MockExtAuthConfigClient) PatchExtAuthConfigStatus(ctx context.Context, obj *v1alpha1.ExtAuthConfig, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchExtAuthConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchExtAuthConfigStatus indicates an expected call of PatchExtAuthConfigStatus.
func (mr *MockExtAuthConfigClientMockRecorder) PatchExtAuthConfigStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchExtAuthConfigStatus", reflect.TypeOf((*MockExtAuthConfigClient)(nil).PatchExtAuthConfigStatus), varargs...)
}

// UpdateExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) UpdateExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthConfig indicates an expected call of UpdateExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) UpdateExtAuthConfig(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).UpdateExtAuthConfig), varargs...)
}

// UpdateExtAuthConfigStatus mocks base method.
func (m *MockExtAuthConfigClient) UpdateExtAuthConfigStatus(ctx context.Context, obj *v1alpha1.ExtAuthConfig, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateExtAuthConfigStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExtAuthConfigStatus indicates an expected call of UpdateExtAuthConfigStatus.
func (mr *MockExtAuthConfigClientMockRecorder) UpdateExtAuthConfigStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExtAuthConfigStatus", reflect.TypeOf((*MockExtAuthConfigClient)(nil).UpdateExtAuthConfigStatus), varargs...)
}

// UpsertExtAuthConfig mocks base method.
func (m *MockExtAuthConfigClient) UpsertExtAuthConfig(ctx context.Context, obj *v1alpha1.ExtAuthConfig, transitionFuncs ...v1alpha1.ExtAuthConfigTransitionFunction) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range transitionFuncs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertExtAuthConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExtAuthConfig indicates an expected call of UpsertExtAuthConfig.
func (mr *MockExtAuthConfigClientMockRecorder) UpsertExtAuthConfig(ctx, obj interface{}, transitionFuncs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, transitionFuncs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExtAuthConfig", reflect.TypeOf((*MockExtAuthConfigClient)(nil).UpsertExtAuthConfig), varargs...)
}

// MockMulticlusterExtAuthConfigClient is a mock of MulticlusterExtAuthConfigClient interface.
type MockMulticlusterExtAuthConfigClient struct {
	ctrl     *gomock.Controller
	recorder *MockMulticlusterExtAuthConfigClientMockRecorder
}

// MockMulticlusterExtAuthConfigClientMockRecorder is the mock recorder for MockMulticlusterExtAuthConfigClient.
type MockMulticlusterExtAuthConfigClientMockRecorder struct {
	mock *MockMulticlusterExtAuthConfigClient
}

// NewMockMulticlusterExtAuthConfigClient creates a new mock instance.
func NewMockMulticlusterExtAuthConfigClient(ctrl *gomock.Controller) *MockMulticlusterExtAuthConfigClient {
	mock := &MockMulticlusterExtAuthConfigClient{ctrl: ctrl}
	mock.recorder = &MockMulticlusterExtAuthConfigClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMulticlusterExtAuthConfigClient) EXPECT() *MockMulticlusterExtAuthConfigClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method.
func (m *MockMulticlusterExtAuthConfigClient) Cluster(cluster string) (v1alpha1.ExtAuthConfigClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster", cluster)
	ret0, _ := ret[0].(v1alpha1.ExtAuthConfigClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cluster indicates an expected call of Cluster.
func (mr *MockMulticlusterExtAuthConfigClientMockRecorder) Cluster(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockMulticlusterExtAuthConfigClient)(nil).Cluster), cluster)
}
